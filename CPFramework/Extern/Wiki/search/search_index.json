{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to the CProcessing documentation wiki!</p> <p>CProcessing is an inhouse game engine developed and maintained by DigiPen. This version is currently maintained specifically by DigiPen Singapore.</p>"},{"location":"index.html#guides","title":"Guides","text":"<ul> <li>Visual Studio 2022 Setup</li> </ul>"},{"location":"index.html#documentation","title":"Documentation","text":"<ul> <li>Engine</li> <li>System</li> <li>Settings</li> <li>Color</li> <li>Graphics</li> <li>Image</li> <li>Sound</li> <li>Font</li> <li>Input</li> <li>Math</li> <li>Vector</li> <li>Matrix</li> <li>Random</li> <li>Types</li> </ul>"},{"location":"documentation/Color.html","title":"Color","text":"<p>This section contains all functions relating to CP_Color.</p>"},{"location":"documentation/Color.html#cp_color_create","title":"CP_Color_Create","text":"<p>Create a CP_Color from given red, green, blue, and alpha values. The input values must be in the range of 0 to 255. CP_Color_Create() can be used to create a variable or used to pass a CP_Color directly as a function parameter.</p>"},{"location":"documentation/Color.html#function","title":"Function","text":"<pre><code>CP_Color CP_Color_Create(int r, int g, int b, int a);\n</code></pre>"},{"location":"documentation/Color.html#parameters","title":"Parameters","text":"<ul> <li>r (int) - The red value of the color.</li> <li>g (int) - The green value of the color.</li> <li>b (int) - The blue value of the color.</li> <li>a (int) - The alpha value of the color.</li> </ul>"},{"location":"documentation/Color.html#return","title":"Return","text":"<ul> <li>CP_Color - The new CP_Color variable with the given color values.</li> </ul>"},{"location":"documentation/Color.html#example","title":"Example","text":"<pre><code>void init()\n{\n    // Use the CP_Color_Create function to create a variable\n    CP_Color color1 = CP_Color_Create(255, 40, 100, 255);\n\n    // Set the background with color1 (berry red)\n    CP_Graphics_ClearBackground(color1);\n\n    // Create a color and pass it directly as a function parameter\n    CP_Settings_Fill(CP_Color_Create(0, 200, 255, 255));\n\n    // Draw a rectangle at the top left of the screen (blue)\n    float rectWidth = CP_System_GetDisplayWidth() * 0.5f;\n    float rectHeight = CP_System_GetDisplayHeight() * 0.5f;\n    CP_Graphics_DrawRect(0, 0, rectWidth, rectHeight);\n}\n</code></pre>"},{"location":"documentation/Color.html#related","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Settings_Fill</li> <li>CP_System_GetDisplayWidth</li> <li>CP_System_GetDisplayHeight</li> </ul>"},{"location":"documentation/Color.html#cp_color_createhex","title":"CP_Color_CreateHex","text":"<p>Create a CP_Color from a hex value. The hex value will be interpreted in this format: 0xRRGGBBAA, where the bytes marked R become the red value, those marked G become the green value, those marked B become the blue value, and those marked A become the alpha value.  CP_Color_CreateHex() can be used to create a variable or used to pass a CP_Color directly as a function parameter.</p>"},{"location":"documentation/Color.html#function_1","title":"Function","text":"<pre><code>CP_Color CP_Color_CreateHex(int hexCode);\n</code></pre>"},{"location":"documentation/Color.html#parameters_1","title":"Parameters","text":"<ul> <li>hexCode (int) - The hex code to be interpreted.</li> </ul>"},{"location":"documentation/Color.html#return_1","title":"Return","text":"<ul> <li>CP_Color - The new CP_Color variable with the given color values.</li> </ul>"},{"location":"documentation/Color.html#example_1","title":"Example","text":"<pre><code>CP_Color red = CP_Color_CreateHex(0xFF0000FF);\nCP_Color green = CP_Color_CreateHex(0x00FF00FF);\nCP_Color blue = CP_Color_CreateHex(0x0000FFFF);\nCP_Color white = CP_Color_CreateHex(0xFFFFFFFF);\n</code></pre>"},{"location":"documentation/Color.html#related_1","title":"Related","text":"<ul> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Color.html#cp_color_lerp","title":"CP_Color_Lerp","text":"<p>Linearly interpolate (lerp) between two given CP_Color inputs using an interpolation factor from 0.0 to 1.0. Returns the newly computed color.</p> <p>The calculation applied to each component of the color:</p> <pre><code>new_color = (1.0f - lerp_factor) * a + lerp_factor * b;\n</code></pre>"},{"location":"documentation/Color.html#function_2","title":"Function","text":"<pre><code>CP_Color CP_Color_Lerp(CP_Color a, CP_Color b, float t);\n</code></pre>"},{"location":"documentation/Color.html#parameters_2","title":"Parameters","text":"<ul> <li>a (CP_Color) - The base color to lerp from. The return value is <code>a</code> when <code>lerp_factor</code> = 0.0.</li> <li>b (CP_Color) - The end color to lerp to. The return values is <code>b</code> when <code>lerp_factor</code> = 1.0.</li> <li>lerp_factor (float) - The value between 0.0 and 1.0 used to linearly interpolate from <code>a</code> to <code>b</code>.</li> </ul>"},{"location":"documentation/Color.html#return_2","title":"Return","text":"<ul> <li>CP_Color - The new CP_Color variable with the interpolated colors.</li> </ul>"},{"location":"documentation/Color.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    // Create colors for the four corners of the screen\n    CP_Color red = CP_Color_Create(255, 0, 0, 255);\n    CP_Color green = CP_Color_Create(0, 255, 0, 255);\n    CP_Color blue = CP_Color_Create(0, 0, 255, 255);\n    CP_Color white = CP_Color_Create(255, 255, 255, 255);\n\n    // Get the mouse position relative to the canvas\n    float mx = (float)CP_Input_GetMouseWorldX() / (float)CP_System_GetDisplayWidth();\n    float my = (float)CP_Input_GetMouseWorldY() / (float)CP_System_GetDisplayHeight();\n\n    // Clamp the values\n    mx = CP_Math_ClampFloat(mx, 0.0f, 1.0f);\n    my = CP_Math_ClampFloat(my, 0.0f, 1.0f);\n\n    // Lerp the colors based on position along the x-axis\n    CP_Color lerpx1 = CP_Color_Lerp(red, blue, mx);\n    CP_Color lerpx2 = CP_Color_Lerp(green, white, mx);\n\n    // Lerp the two previous colors based on y-axis position\n    CP_Color lerp = CP_Color_Lerp(lerpx1, lerpx2, my);\n\n    // Set the background based on the lerp\n    CP_Graphics_ClearBackground(lerp);\n}\n</code></pre>"},{"location":"documentation/Color.html#related_2","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_System_GetDisplayWidth</li> <li>CP_System_GetDisplayHeight</li> <li>CP_Math_ClampFloat</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Color.html#cp_color_fromcolorhsl","title":"CP_Color_FromColorHSL","text":"<p>Converts a CP_ColorHSL to a CP_Color.</p> <p>NOTE: All graphics and settings functions within CProcessing expect colors in RGB format (CP_Color) so you will be required to convert using this function if you are using HSL (CP_ColorHSL) formats for various effects.</p>"},{"location":"documentation/Color.html#function_3","title":"Function","text":"<pre><code>CP_Color CP_Color_FromColorHSL(CP_ColorHSL hsl);\n</code></pre>"},{"location":"documentation/Color.html#parameters_3","title":"Parameters","text":"<ul> <li>hsl (CP_ColorHSL) - The HSL value to be converted to RGB.</li> </ul>"},{"location":"documentation/Color.html#return_3","title":"Return","text":"<ul> <li>CP_Color - The new CP_Color variable.</li> </ul>"},{"location":"documentation/Color.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    // Get the current framecount and set the background to black\n    int frameCount = CP_System_GetFrameCount();\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Use framecount to slowly change the HSL color through all colors of the rainbow\n    CP_ColorHSL hsl = CP_ColorHSL_Create(360 - (frameCount * 3), 100, 50, 255);\n\n    // Convert from HSL to RGB to be used as the fill color and draw a rectangle\n    CP_Settings_Fill(CP_Color_FromColorHSL(hsl));\n    CP_Graphics_DrawRectAdvanced(10, 10, 380, 380, 0, 20);\n}\n</code></pre>"},{"location":"documentation/Color.html#related_3","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_ColorHSL_Create</li> <li>CP_System_GetFrameCount</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawRectAdvanced</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Color.html#cp_colorhsl_create","title":"CP_ColorHSL_Create","text":"<p>Create a CP_ColorHSL from given hue, saturation, value, and alpha values.</p>"},{"location":"documentation/Color.html#function_4","title":"Function","text":"<pre><code>CP_ColorHSL CP_ColorHSL_Create(int h, int s, int l, int a);\n</code></pre>"},{"location":"documentation/Color.html#parameters_4","title":"Parameters","text":"<ul> <li>h (int) - The hue of the color. Range of 0-360</li> <li>s (int) - The saturation of the color. Range of 0-100.</li> <li>v (int) - The value of the color. Range of 0-100.</li> <li>a (int) - The alpha of the color. Range of 0-255.</li> </ul>"},{"location":"documentation/Color.html#return_4","title":"Return","text":"<ul> <li>CP_ColorHSL - The new CP_ColorHSL variable.</li> </ul>"},{"location":"documentation/Color.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    // Get the current framecount and set the background to black\n    int frameCount = CP_System_GetFrameCount();\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Use framecount to slowly change the HSL color through all colors of the rainbow\n    CP_ColorHSL hsl = CP_ColorHSL_Create((frameCount * 3) % 360, 100, 50, 255);\n    CP_Settings_Fill(CP_Color_FromColorHSL(hsl));\n    CP_Graphics_DrawRectAdvanced(10, 10, 380, 380, 0, 20);\n}\n</code></pre>"},{"location":"documentation/Color.html#related_4","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Color_FromColorHSL</li> <li>CP_System_GetFrameCount</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawRectAdvanced</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Color.html#cp_colorhsl_lerp","title":"CP_ColorHSL_Lerp","text":"<p>Linearly interpolate (lerp) between two given CP_ColorHSL inputs using an interpolation factor from 0.0 to 1.0. Returns the newly computed color.</p> <p>The calculation applied to each component of the color:</p> <pre><code>new_color = (1.0f - lerp_factor) * a + lerp_factor * b;\n</code></pre>"},{"location":"documentation/Color.html#function_5","title":"Function","text":"<pre><code>CP_ColorHSL CP_ColorHSL_Lerp(CP_ColorHSL a, CP_ColorHSL b, float t);\n</code></pre>"},{"location":"documentation/Color.html#parameters_5","title":"Parameters","text":"<ul> <li>a (CP_ColorHSL) - The base color to lerp from. The return value is <code>a</code> when <code>lerp_factor</code> = 0.0.</li> <li>b (CP_ColorHSL) - The end color to lerp to. The return values is <code>b</code> when <code>lerp_factor</code> = 1.0.</li> <li>lerp_factor (float) - The value between 0.0 and 1.0 used to linearly interpolate from <code>a</code> to <code>b</code>.</li> </ul>"},{"location":"documentation/Color.html#return_5","title":"Return","text":"<ul> <li>CP_ColorHSL - The new CP_ColorHSL variable.</li> </ul>"},{"location":"documentation/Color.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    // Create colors for the left and right side of the screen\n    CP_ColorHSL start = CP_ColorHSL_Create(0, 100, 50, 255);\n    CP_ColorHSL end = CP_ColorHSL_Create(359, 100, 50, 255);\n\n    // Get the mouse position relative to the canvas\n    float mx = (float)CP_Input_GetMouseWorldX() / (float)CP_System_GetDisplayWidth();\n\n    // Clamp the values\n    mx = CP_Math_ClampFloat(mx, 0.0f, 1.0f);\n\n    // Lerp the colors based on mouse position along the x-axis\n    CP_ColorHSL lerp = CP_ColorHSL_Lerp(start, end, mx);\n\n    // Set the background based on the lerp\n    CP_Graphics_ClearBackground(CP_Color_FromColorHSL(lerp));\n}\n</code></pre>"},{"location":"documentation/Color.html#related_5","title":"Related","text":"<ul> <li>CP_ColorHSL_Create</li> <li>CP_Color_FromColorHSL</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_System_GetDisplayWidth</li> <li>CP_Math_ClampFloat</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Color.html#cp_colorhsl_fromcolor","title":"CP_ColorHSL_FromColor","text":"<p>Converts a CP_Color to a CP_ColorHSL.</p> <p>NOTE: All graphics and settings functions within CProcessing expect colors in RGB format (CP_Color) so you will be required to convert if you are using HSL (CP_ColorHSL) formats for various effects.</p>"},{"location":"documentation/Color.html#function_6","title":"Function","text":"<pre><code>CP_ColorHSL CP_ColorHSL_FromColor(CP_Color rgb);\n</code></pre>"},{"location":"documentation/Color.html#parameters_6","title":"Parameters","text":"<ul> <li>rgb (CP_Color) - The RGB value to be converted to HSL.</li> </ul>"},{"location":"documentation/Color.html#return_6","title":"Return","text":"<ul> <li>CP_ColorHSL - The new C_ColorHSL variable.</li> </ul>"},{"location":"documentation/Color.html#example_6","title":"Example","text":"<pre><code>void update()\n{\n    // Get the current framecount and set the background to black\n    int frameCount = CP_System_GetFrameCount();\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Use framecount to slowly change the HSL color through all colors of the rainbow\n    CP_ColorHSL hsl = CP_ColorHSL_Create(360 - (frameCount * 3), 100, 50, 255);\n\n    // Convert from HSL to RGB to be used as the fill color and draw a rectangle\n    CP_Settings_Fill(CP_Color_FromColorHSL(hsl));\n    CP_Graphics_DrawRectAdvanced(10, 10, 380, 380, 0, 20);\n}\n</code></pre>"},{"location":"documentation/Color.html#related_6","title":"Related","text":"<ul> <li>CP_ColorHSL_Create</li> <li>CP_Color_Create</li> <li>CP_System_GetFrameCount</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawRectAdvanced</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Engine.html","title":"Engine","text":"<p>This section contains all of the Engine functions.</p>"},{"location":"documentation/Engine.html#cp_engine_run","title":"CP_Engine_Run","text":"<p>This function is what starts the CProcessing engine. Before calling CP_Engine_Run(), CP_Engine_SetNextGameState or CP_Engine_SetNextGameStateForced must be called to set the initial state of the program. Failing to do so will cause the program to end immediately.</p>"},{"location":"documentation/Engine.html#function","title":"Function","text":"<pre><code>void CP_Engine_Run();\n</code></pre>"},{"location":"documentation/Engine.html#parameters","title":"Parameters","text":"<ul> <li>showConsole (CP_BOOL) - A boolean indicating whether to display a console along the application. Provide a non-zero value to display a console.</li> </ul>"},{"location":"documentation/Engine.html#return","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example","title":"Example","text":"<pre><code>void init()\n{\n    /* Set the size of the window */\n    CP_System_SetWindowSize(500, 500);\n}\n\nvoid update()\n{\n    /* Set the background color to black every frame */\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    /* Draw a rectangle at the mouse position */\n    CP_Graphics_DrawRect(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 50, 50);\n}\n\nint main()\n{\n    // Set the initial game state\n    CP_Engine_SetNextGameState(init, update, NULL);\n\n    // Run the program\n    CP_Engine_Run(0);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related","title":"Related","text":"<ul> <li>CP_System_SetWindowSize</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Graphics_DrawRect</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Engine.html#cp_engine_terminate","title":"CP_Engine_Terminate","text":"<p>This will end the program after completing the current frame.</p>"},{"location":"documentation/Engine.html#function_1","title":"Function","text":"<pre><code>void CP_Engine_Terminate();\n</code></pre>"},{"location":"documentation/Engine.html#parameters_1","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Engine.html#return_1","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example_1","title":"Example","text":"<pre><code>// Horizontal position of the square\nfloat x_pos;\nvoid init()\n{\n    // Start the square at the left of the screen\n    x_pos = 0;\n\n    // Set the square to draw yellow\n    CP_Settings_Fill(CP_Color_Create(255, 255, 0, 255));\n}\n\nvoid update()\n{\n    // Set background to black\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Draw the square\n    CP_Graphics_DrawRect(x_pos, (float)CP_System_GetWindowHeight()/ 2.0f, 100, 100);\n    x_pos += 2;\n\n    // If space pressed, reset the state\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n    {\n        CP_Engine_SetNextGameStateForced(init, update, NULL);\n    }\n\n    // If escape is pressed, end the program\n    if (CP_Input_KeyTriggered(KEY_ESCAPE))\n    {\n        CP_Engine_Terminate();\n    }\n}\n\nint main(void)\n{\n    // Set the initial game state\n    CP_Engine_SetNextGameState(init, update, NULL);\n\n    // Run the program\n    CP_Engine_Run(0);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related_1","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Input_KeyTriggered</li> <li>CP_Settings_Fill</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Engine.html#cp_engine_setnextgamestate","title":"CP_Engine_SetNextGameState","text":"<p>This sets the next state for the program to enter. This will call the shutdown function of the current state if own exists. Calling CP_Engine_SetNextGameState() on the same state you are currently in will have no effect, but calling CP_Engine_SetNextGameStateForced will restart the current state.</p>"},{"location":"documentation/Engine.html#function_2","title":"Function","text":"<pre><code>void CP_Engine_SetNextGameState(FunctionPtr init, FunctionPtr update, FunctionPtr shutdown);\n</code></pre>"},{"location":"documentation/Engine.html#parameters_2","title":"Parameters","text":"<ul> <li>init (FunctionPtr) - The name of the function called once when the state first begins. This can be NULL if no initialization is needed for your state.</li> <li>update (FunctionPtr) - The name of the function called every frame to update the state.</li> <li>shutdown (FunctionPtr) - The name of the function called when you leave a state. This occurs when you call CP_Engine_SetNextGameState or CP_Engine_SetNextGameStateForced to change states. This can be NULL if no cleanup is needed for your state.</li> </ul>"},{"location":"documentation/Engine.html#return_2","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example_2","title":"Example","text":"<pre><code>void init()\n{\n    /* Set the size of the window */\n    CP_System_SetWindowSize(500, 500);\n}\n\nvoid update()\n{\n    /* Set the background color to black every frame */\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    /* Draw a rectangle at the mouse position */\n    CP_Graphics_DrawRect(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 50, 50);\n}\n\nint main()\n{\n    // Set the initial game state\n    CP_Engine_SetNextGameState(init, update, NULL);\n\n    // Run the program\n    CP_Engine_Run(0);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related_2","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Input_GetMouseX</li> <li>CP_System_SetWindowSize</li> </ul>"},{"location":"documentation/Engine.html#cp_engine_setnextgamestateforced","title":"CP_Engine_SetNextGameStateForced","text":"<p>This sets the next state for the program to enter. This will call the shutdown function of the current state if it exists. Calling CP_Engine_SetNextGameStateForced() allows you to reset your current game state, while CP_Engine_SetNextGameState with the current game state will not.</p>"},{"location":"documentation/Engine.html#function_3","title":"Function","text":"<pre><code>void CP_Engine_SetNextGameStateForced(FunctionPtr init, FunctionPtr update, FunctionPtr shutdown);\n</code></pre>"},{"location":"documentation/Engine.html#parameters_3","title":"Parameters","text":"<ul> <li>init (FunctionPtr) - The name of the function called once when the state first begins. This can be NULL if no initialization is needed for your state.</li> <li>update (FunctionPtr) - The name of the function called every frame to update the state.</li> <li>shutdown (FunctionPtr) - The name of the function called when you leave a state. This occurs when you call CP_Engine_SetNextGameState or CP_Engine_SetNextGameStateForced() to change states. This can be NULL if no cleanup is needed for your state.</li> </ul>"},{"location":"documentation/Engine.html#return_3","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example_3","title":"Example","text":"<pre><code>// Horizontal position of the square\nfloat x_pos;\nvoid init()\n{\n    // Start the square at the left of the screen\n    x_pos = 0;\n\n    // Set the square to draw yellow\n    CP_Settings_Fill(CP_Color_Create(255, 255, 0, 255));\n}\n\nvoid update()\n{\n    // Set background to black\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Draw the square\n    CP_Graphics_DrawRect(x_pos, (float)CP_System_GetWindowHeight() / 2.0f, 100, 100);\n    x_pos += 2;\n\n    // If space pressed, reset the state\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n        CP_Engine_SetNextGameStateForced(init, update, NULL);\n}\n\nint main(void)\n{\n    // Set the initial game state\n    CP_Engine_SetNextGameState(init, update, NULL);\n\n    // Run the program\n    CP_Engine_Run(0);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related_3","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Input_KeyTriggered</li> <li>CP_Settings_Fill</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Engine.html#cp_engine_setpreupdatefunction","title":"CP_Engine_SetPreUpdateFunction","text":"<p>This sets a function which will be called immediately before the current state's update function. This function is independent of the game state: it will continue to be called even if the game state is changed.</p>"},{"location":"documentation/Engine.html#function_4","title":"Function","text":"<pre><code>void CP_Engine_SetPreUpdateFunction(FunctionPtr function);\n</code></pre>"},{"location":"documentation/Engine.html#parameters_4","title":"Parameters","text":"<ul> <li>function (FunctionPtr) - The name of the function to be called before the update.</li> </ul>"},{"location":"documentation/Engine.html#return_4","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example_4","title":"Example","text":"<pre><code>void preUpdate()\n{\n    // Change the fill color\n    CP_Settings_Fill(CP_Color_Create(187, 24, 211, 255));\n}\n\nvoid init()\n{\n    CP_Engine_SetPreUpdateFunction(preUpdate);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related_4","title":"Related","text":"<ul> <li>CP_Settings_Fill</li> </ul>"},{"location":"documentation/Engine.html#cp_engine_setpostupdatefunction","title":"CP_Engine_SetPostUpdateFunction","text":"<p>This sets a function which will be called immediately after the current state's update function. This function is independent of the game state: it will continue to be called even if the game state is changed.</p>"},{"location":"documentation/Engine.html#function_5","title":"Function","text":"<pre><code>void CP_Engine_SetPostUpdateFunction(FunctionPtr function);\n</code></pre>"},{"location":"documentation/Engine.html#parameters_5","title":"Parameters","text":"<ul> <li>function (FunctionPtr) - The name of the function to be called after the update.</li> </ul>"},{"location":"documentation/Engine.html#return_5","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Engine.html#example_5","title":"Example","text":"<pre><code>void postUpdate()\n{\n    // Change the fill color\n    CP_Settings_Fill(CP_Color_Create(187, 24, 211, 255));\n}\n\nvoid init()\n{\n    CP_Engine_SetPostUpdateFunction(postUpdate);\n}\n</code></pre>"},{"location":"documentation/Engine.html#related_5","title":"Related","text":"<ul> <li>CP_Settings_Fill</li> </ul>"},{"location":"documentation/Font.html","title":"Font","text":"<p>This section contains all functions relating to CP_Font.</p>"},{"location":"documentation/Font.html#cp_font_load","title":"CP_Font_Load","text":"<p>Loads a CP_Font from the given filepath.</p>"},{"location":"documentation/Font.html#function","title":"Function","text":"<pre><code>CP_Font CP_Font_Load(const char* filepath);\n</code></pre>"},{"location":"documentation/Font.html#parameters","title":"Parameters","text":"<ul> <li>filepath (const char*) - The filepath to the font that you want to load.</li> </ul>"},{"location":"documentation/Font.html#return","title":"Return","text":"<ul> <li>CP_Font - The font loaded from the given filepath, will be NULL if no font could be loaded.</li> </ul>"},{"location":"documentation/Font.html#example","title":"Example","text":"<pre><code>CP_Font myFont;\n\nvoid init()\n{\n    myFont = CP_Font_Load(\"Assets/Justins_Font.ttf\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    CP_Font_Set(myFont);\n    CP_Font_DrawText(\"Hi Justin!\", 100, 100);\n}\n\nvoid shutdown()\n{\n    CP_Font_Free(myFont);\n}\n</code></pre>"},{"location":"documentation/Font.html#related","title":"Related","text":"<ul> <li>CP_Font</li> <li>CP_Font_Free</li> <li>CP_Font_Set</li> <li>CP_Font_DrawText</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Font.html#cp_font_free","title":"CP_Font_Free","text":"<p>Frees a CP_Font resource.</p>"},{"location":"documentation/Font.html#function_1","title":"Function","text":"<pre><code>void CP_Font_Free(CP_Font font);\n</code></pre>"},{"location":"documentation/Font.html#parameters_1","title":"Parameters","text":"<ul> <li>font (CP_Font*) - The address of the font you want to free.</li> </ul>"},{"location":"documentation/Font.html#return_1","title":"Return","text":"<p>There are no return values for this function</p>"},{"location":"documentation/Font.html#example_1","title":"Example","text":"<pre><code>CP_Font myFont;\n\nvoid init()\n{\n    myFont = CP_Font_Load(\"Assets/Justins_Font.ttf\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    CP_Font_Set(myFont);\n    CP_Font_DrawText(\"Hi Justin!\", 100, 100);\n}\n\nvoid shutdown()\n{\n    CP_Font_Free(myFont);\n}\n</code></pre>"},{"location":"documentation/Font.html#related_1","title":"Related","text":"<ul> <li>CP_Font</li> <li>CP_Font_Load</li> <li>CP_Font_Set</li> <li>CP_Font_DrawText</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Font.html#cp_font_set","title":"CP_Font_Set","text":"<p>Sets a given CP_Font as the font to use when drawing text.</p>"},{"location":"documentation/Font.html#function_2","title":"Function","text":"<pre><code>void CP_Font_Set(CP_Font font);\n</code></pre>"},{"location":"documentation/Font.html#parameters_2","title":"Parameters","text":"<ul> <li>font (CP_Font) - The font that you want to use when drawing text.</li> </ul>"},{"location":"documentation/Font.html#return_2","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Font.html#example_2","title":"Example","text":"<pre><code>CP_Font myFont;\n\nvoid init()\n{\n    myFont = CP_Font_Load(\"Assets/Justins_Font.ttf\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    CP_Font_Set(myFont);\n    CP_Font_DrawText(\"Hi Justin!\", 100, 100);\n}\n\nvoid shutdown()\n{\n    CP_Font_Free(myFont);\n}\n</code></pre>"},{"location":"documentation/Font.html#related_2","title":"Related","text":"<ul> <li>CP_Font</li> <li>CP_Font_Free</li> <li>CP_Font_Load</li> <li>CP_Font_DrawText</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Font.html#cp_font_drawtext","title":"CP_Font_DrawText","text":"<p>Draws the given text to the screen using the current CP_Font.</p>"},{"location":"documentation/Font.html#function_3","title":"Function","text":"<pre><code>void CP_Font_DrawText(const char* text, float x, float y);\n</code></pre>"},{"location":"documentation/Font.html#parameters_3","title":"Parameters","text":"<ul> <li>text (const char*) - The text you want to display on the screen.</li> <li>x (float) - The x position of the text.</li> <li>y (float) - The y position of the text.</li> </ul>"},{"location":"documentation/Font.html#return_3","title":"Return","text":"<p>This function does not return anything</p>"},{"location":"documentation/Font.html#example_3","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    CP_Settings_Fill(CP_Color_Create(0, 0, 0, 255));\n    CP_Settings_TextSize(20.0f);\n\n    char buffer[50] = { 0 };\n    sprintf_s(buffer, 50, \"Frame count: %i\", CP_System_GetFrameCount());\n    CP_Font_DrawText(buffer, 30, 30);\n\n    CP_Font_DrawText(\"Hi Justin!\", 100, 200);\n}\n</code></pre>"},{"location":"documentation/Font.html#related_3","title":"Related","text":"<ul> <li>CP_Font</li> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Font.html#cp_font_drawtextbox","title":"CP_Font_DrawTextBox","text":"<p>Draws the given text onto the screen within a text box using the current CP_Font.</p>"},{"location":"documentation/Font.html#function_4","title":"Function","text":"<pre><code>void CP_Font_DrawTextBox(const char* text, float x, float y, float rowWidth);\n</code></pre>"},{"location":"documentation/Font.html#parameters_4","title":"Parameters","text":"<ul> <li>text (const char*) - The text you want to display on the screen.</li> <li>x (float) - The x position of the text.</li> <li>y (float) - The y position of the text.</li> <li>rowWidth (float) - The width of each row.</li> </ul>"},{"location":"documentation/Font.html#return_4","title":"Return","text":"<p>This function does not return anything</p>"},{"location":"documentation/Font.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n  CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n  CP_Font_DrawTextBox(\"Hi Justin!\", 100, 100, 20);\n}\n</code></pre>"},{"location":"documentation/Font.html#related_4","title":"Related","text":"<ul> <li>CP_Font</li> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Graphics.html","title":"Graphics","text":"<p>This section contains all of the Graphics functions.</p>"},{"location":"documentation/Graphics.html#cp_graphics_clearbackground","title":"CP_Graphics_ClearBackground","text":"<p>This function clears anything previously drawn to the screen and sets the entire screen to the provided color. Typically, you will use this at the beginning of any update loop to set a background color.</p>"},{"location":"documentation/Graphics.html#function","title":"Function","text":"<pre><code>void CP_Graphics_ClearBackground(CP_Color color);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters","title":"Parameters","text":"<ul> <li>color (CP_Color) - The color that will be used to clear the screen.</li> </ul>"},{"location":"documentation/Graphics.html#return","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // Create the color green\n    CP_Color myColor = CP_Color_Create(0, 255, 0, 255);\n\n    // Set the background color to green and erase anything that was previously crawn\n    CP_Graphics_ClearBackground(myColor);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related","title":"Related","text":"<ul> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawpoint","title":"CP_Graphics_DrawPoint","text":"<p>This function draws a point at a given position. The color of the point is specified with the function CP_Settings_Fill. There is no stroke option for a point.</p>"},{"location":"documentation/Graphics.html#function_1","title":"Function","text":"<pre><code>void CP_Graphics_DrawPoint(float x, float y);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_1","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the point.</li> <li>y (float) - The vertical position of the point.</li> </ul>"},{"location":"documentation/Graphics.html#return_1","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_1","title":"Example","text":"<pre><code>void init()\n{\n    // fill the background black to see the white points\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n}\n\nvoid update()\n{\n    // Hide the cursor on this window\n    CP_System_ShowCursor(false);\n\n    // fill the pixel white\n    CP_Settings_Fill(CP_Color_Create(0, 0, 0, 255));\n\n    // draw a single pixel at the mouse position\n    CP_Graphics_DrawPoint(CP_Input_GetMouseX(), CP_Input_GetMouseY());\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_1","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_ShowCursor</li> <li>CP_Settings_Fill</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawline","title":"CP_Graphics_DrawLine","text":"<p>This function draws a line using two points. For most shapes you can set the color using CP_Settings_Fill, but a line is only a stroke, so you must use CP_Settings_Stroke to set the color.</p>"},{"location":"documentation/Graphics.html#function_2","title":"Function","text":"<pre><code>void CP_Graphics_DrawLine(float x1, float y1, float x2, float y2);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_2","title":"Parameters","text":"<ul> <li>x1 (float) - The first point's x position.</li> <li>y1 (float) - The first point's y position.</li> <li>x2 (float) - The second point's x position.</li> <li>y2 (float) - The second point's y position.</li> </ul>"},{"location":"documentation/Graphics.html#return_2","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    // set the stroke color to orange\n    CP_Settings_Stroke(CP_Color_Create(255, 160, 20, 255));\n\n    // draw a line from (100, 100) to (100, 200)\n    //                      x1      y1      x2      y2\n    CP_Graphics_DrawLine(100.0f, 100.0f, 500.0f, 100.0f);\n\n    // set the stroke color to light blue\n    CP_Settings_Stroke(CP_Color_Create(0, 160, 255, 255));\n\n    // draw a line from the origin to the mouse position\n    CP_Graphics_DrawLine(0.0f, 0.0f, CP_Input_GetMouseX(), CP_Input_GetMouseY());\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_2","title":"Related","text":"<ul> <li>CP_Settings_Stroke</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawlineadvanced","title":"CP_Graphics_DrawLineAdvanced","text":"<p>A specialized version of the CP_Graphics_DrawLine function which allows the user to specify a rotation (in degrees). The line is always rotated around the center.</p>"},{"location":"documentation/Graphics.html#function_3","title":"Function","text":"<pre><code>void CP_Graphics_DrawLineAdvanced(float x1, float y1, float x2, float y2, float degrees);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_3","title":"Parameters","text":"<ul> <li>x1 (float) - The horizontal position of the start of the line.</li> <li>y1 (float) - The vertical position of the start of the line.</li> <li>x2 (float) - The horizontal position of the end of the line.</li> <li>y1 (float) - The vertical position of the end of the line.</li> <li>degrees (float) - The rotation in degrees.</li> </ul>"},{"location":"documentation/Graphics.html#return_3","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    // a line from (100, 100) to (200, 100) rotated 45 degrees about the center\n    CP_Graphics_DrawLineAdvanced(100.0f, 100.0f, 200.0f, 100.0f, 45.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_3","title":"Related","text":"<ul> <li>CP_Graphics_DrawLine</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawrect","title":"CP_Graphics_DrawRect","text":"<p>This is a function that draws a rectangle on the screen at a specified point with a specified width and height.</p> <p>Note: You can use CP_Settings_RectMode to control whether the specified point refers to the center of the rectangle or to its top left corner.</p>"},{"location":"documentation/Graphics.html#function_4","title":"Function","text":"<pre><code>void CP_Graphics_DrawRect(float x, float y, float w, float h);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_4","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the rectangle.</li> <li>y (float) - The vertical position of the rectangle.</li> <li>w (float) - The width of the rectangle.</li> <li>h (float) - The height of the rectangle.</li> </ul>"},{"location":"documentation/Graphics.html#return_4","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    // Clear the background to a blue color\n    CP_Graphics_ClearBackground(CP_Color_Create(20, 200, 255, 255));\n\n    // Draw a rectangle at the point (100, 100)\n    CP_Graphics_DrawRect(100.0f, 100.0f, 50.0f, 50.0f);\n\n    // Draw a rectangle at the mouse position\n    CP_Graphics_DrawRect(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 25.0f, 25.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_4","title":"Related","text":"<ul> <li>CP_Settings_RectMode</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawrectadvanced","title":"CP_Graphics_DrawRectAdvanced","text":"<p>This is a specialized version of the CP_Graphics_DrawRect function which additionally allows you to specify a rotation (in degrees). This rotates the rectangle around the reference point at which you draw the rectangle, so the CP_POSITION_CENTER CP_Settings_RectMode will rotate around the center of the rectangle, while the CP_POSITION_CORNER CP_Settings_RectMode will rotate around the top-left corner.</p>"},{"location":"documentation/Graphics.html#function_5","title":"Function","text":"<pre><code>void CP_Graphics_DrawRectAdvanced(float x, float y, float w, float h, float degrees, float cornerRadius);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_5","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the rectangle.</li> <li>y (float) - The vertical position of the rectangle.</li> <li>w (float) - The width of the rectangle.</li> <li>h (float) - The height of the rectangle.</li> <li>degrees (float) - The rotation in degrees.</li> <li>cornerRadius (float) - The radius of the rounded corners of the rectangle (0 for no rounded corners).</li> </ul>"},{"location":"documentation/Graphics.html#return_5","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    // draw a 100x50 rectangle rotated by 45 degrees\n    CP_Graphics_DrawRectAdvanced(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 100.0f, 50.0f, 45.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_5","title":"Related","text":"<ul> <li>CP_Graphics_DrawRect</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawcircle","title":"CP_Graphics_DrawCircle","text":"<p>This is a simplified version of CP_Graphics_DrawEllipse. A circle can be drawn on the screen using this function. The mode for drawing a circle and ellipse can be changed with CP_Settings_EllipseMode.</p>"},{"location":"documentation/Graphics.html#function_6","title":"Function","text":"<pre><code>void CP_Graphics_DrawCircle(float x, float y, float d);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_6","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the circle.</li> <li>y (float) - The vertical position of the circle.</li> <li>d (float) - The diameter of the circle.</li> </ul>"},{"location":"documentation/Graphics.html#return_6","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_6","title":"Example","text":"<pre><code>void update()\n{\n    // set the background color\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 40, 200, 255));\n\n    //draw a circle at (100, 100)\n    CP_Graphics_DrawCircle(100, 100, 50.0f);\n\n    // draw a circle at the mouse position\n    CP_Graphics_DrawCircle(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 20.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_6","title":"Related","text":"<ul> <li>CP_Graphics_DrawEllipse</li> <li>CP_Settings_EllipseMode</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawellipse","title":"CP_Graphics_DrawEllipse","text":"<p>This function allows you to draw an ellipse with differing width and height. To draw an ellipse, provide the x and y values of a point and the width and height (diameters) of your ellipse. You can set the fill color of the drawn shape with CP_Settings_Fill and the stroke color with CP_Settings_Stroke. The method for drawing ellipses can be changed to different modes using CP_Settings_EllipseMode.</p>"},{"location":"documentation/Graphics.html#function_7","title":"Function","text":"<pre><code>void CP_Graphics_DrawEllipse(float x, float y, float w, float h);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_7","title":"Parameters","text":"<ul> <li>x (float) - The horizontal coordinate of the ellipse.</li> <li>y (float) - The vertical coordinate of the ellipse.</li> <li>w (float) - The width of the ellipse as a diameter.</li> <li>h (float) - The height of the ellipse as a diameter.</li> </ul>"},{"location":"documentation/Graphics.html#return_7","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_7","title":"Example","text":"<pre><code>void update()\n{\n    // Set the background color to red\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 100, 100, 255));\n\n    // Draw an ellipse at the point (100, 100)\n    CP_Graphics_DrawEllipse(100.0f, 100.0f, 50.0f, 80.0f);\n\n    // Draw an ellipse at the mouse position\n    CP_Graphics_DrawEllipse(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 20.0f, 60.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_7","title":"Related","text":"<ul> <li>CP_Settings_EllipseMode</li> <li>CP_Settings_Fill</li> <li>CP_Settings_Stroke</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawellipseadvanced","title":"CP_Graphics_DrawEllipseAdvanced","text":"<p>A specialized version of the CP_Graphics_DrawEllipse function which allows you to specify a rotation (in degrees). The shape will rotate about the reference point specified by the CP_Settings_EllipseMode.</p>"},{"location":"documentation/Graphics.html#function_8","title":"Function","text":"<pre><code>void CP_Graphics_DrawEllipseAdvanced(float x, float y, float w, float h, float degrees);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_8","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the ellipse.</li> <li>y (float) - The vertical position of the ellipse.</li> <li>w (float) - The width (horizontal diameter) of the ellipse.</li> <li>h (float) - The height (vertical diameter) of the ellipse.</li> <li>degrees (float) - The rotation in degrees.</li> </ul>"},{"location":"documentation/Graphics.html#return_8","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_8","title":"Example","text":"<pre><code>void update()\n{\n    // draw a 100x50 ellipse rotated by 45 degrees at the mouse position\n    CP_Graphics_DrawEllipseAdvanced(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 100.0f, 50.0f, 45.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_8","title":"Related","text":"<ul> <li>CP_Graphics_DrawEllipse</li> <li>CP_Settings_EllipseMode</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawtriangle","title":"CP_Graphics_DrawTriangle","text":"<p>This function draws a triangle to the screen given three points. The filled color of the triangle can be set with CP_Settings_Fill and the stroke outline can be changed with CP_Settings_Stroke.</p>"},{"location":"documentation/Graphics.html#function_9","title":"Function","text":"<pre><code>void CP_Graphics_DrawTriangle(float x1, float y1, float x2, float y2, float x3, float y3);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_9","title":"Parameters","text":"<ul> <li>x1 (float) - The first point's horizontal position.</li> <li>y1 (float) - The first point's vertical position.</li> <li>x2 (float) - The second point's horizontal position.</li> <li>y2 (float) - The second point's vertical position.</li> <li>x3 (float) - The third point's horizontal position.</li> <li>y3 (float) - The third point's vertical position.</li> </ul>"},{"location":"documentation/Graphics.html#return_9","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    // set the fill color to red\n    CP_Settings_Fill(CP_Color_Create(255, 0, 0, 255));\n\n    // draw a triangle with three points\n    CP_Graphics_DrawTriangle(100.0f, 100.0f,    // point 1\n        200.0f, 100.0f,                         // point 2\n        200.0f, 200.0f);                        // point 3\n\n    // set the fill color to dark blue\n    CP_Settings_Fill(CP_Color_Create(0, 0, 160, 255));\n\n    // draw a triangle with three points\n    CP_Graphics_DrawTriangle(0.0f, 0.0f,                             // point 1\n        CP_Input_GetMouseX(), CP_Input_GetMouseY(),                  // point 2\n        CP_Input_GetMousePreviousX(), CP_Input_GetMousePreviousY()); // point 3\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_9","title":"Related","text":"<ul> <li>CP_Settings_Fill</li> <li>CP_Settings_Stroke</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> <li>CP_Input_GetMousePreviousX</li> <li>CP_Input_GetMousePreviousY</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawtriangleadvanced","title":"CP_Graphics_DrawTriangleAdvanced","text":"<p>A specialized version of the CP_Graphics_DrawTriangle function which allows the user to specify a rotation (in degrees). The rotation is always about the center of the triangle.</p>"},{"location":"documentation/Graphics.html#function_10","title":"Function","text":"<pre><code>void CP_Graphics_DrawTriangleAdvanced(float x1, float y1, float x2, float y2, float x3, float y3, float degrees);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_10","title":"Parameters","text":"<ul> <li>x1 (float) - The first point's horizontal position.</li> <li>y1 (float) - The first point's vertical position.</li> <li>x2 (float) - The second point's horizontal position.</li> <li>y2 (float) - The second point's vertical position.</li> <li>x3 (float) - The third point's horizontal position.</li> <li>y3 (float) - The third point's vertical position.</li> <li>degrees (float) - The rotation in degrees.</li> </ul>"},{"location":"documentation/Graphics.html#return_10","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_10","title":"Example","text":"<pre><code>void update()\n{\n    // A triangle drawn based on the points (100, 100), (125, 150), (75, 150)\n    // with a rotation of 15 degrees\n    CP_Graphics_DrawTriangleAdvanced(100.0f, 100.0f, 125.0f, 150.0f, 75.0f, 150.0f, 15.0f);\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_10","title":"Related","text":"<ul> <li>CP_Graphics_DrawTriangle</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawquad","title":"CP_Graphics_DrawQuad","text":"<p>This function will draw a quadrangle given four points. They will need to be in clockwise or counter-clockwise order, but it doesn't matter which.</p>"},{"location":"documentation/Graphics.html#function_11","title":"Function","text":"<pre><code>void CP_Graphics_DrawQuad(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_11","title":"Parameters","text":"<ul> <li>x1 (float) - The first point's horizontal position.</li> <li>y1 (float) - The first point's vertical position.</li> <li>x2 (float) - The second point's horizontal position.</li> <li>y2 (float) - The second point's vertical position.</li> <li>x3 (float) - The third point's horizontal position.</li> <li>y3 (float) - The third point's vertical position.</li> <li>x4 (float) - The fourth point's horizontal position.</li> <li>y4 (float) - The fourth point's vertical position.</li> </ul>"},{"location":"documentation/Graphics.html#return_11","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_11","title":"Example","text":"<pre><code>void update()\n{\n    // draw a quadrangle given four points\n    //                     x       y\n    CP_Graphics_DrawQuad(0.0f,   0.0f,    // corner 1\n                         100.0f, 0.0f,    // corner 2\n                         100.0f, 50.0f,   // corner 3\n                         0.0f,   50.0f);  // corner 4\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_11","title":"Related","text":"<ul> <li>CP_Graphics_DrawQuadAdvanced</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_drawquadadvanced","title":"CP_Graphics_DrawQuadAdvanced","text":"<p>A specialized version of the CP_Graphics_DrawQuad function which allows the user to specify a rotation in degrees. The quadrangle is always rotated about the center.</p>"},{"location":"documentation/Graphics.html#function_12","title":"Function","text":"<pre><code>void CP_Graphics_DrawQuadAdvanced(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float degrees);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_12","title":"Parameters","text":"<ul> <li>x1 (float) - The first point's horizontal position.</li> <li>y1 (float) - The first point's vertical position.</li> <li>x2 (float) - The second point's horizontal position.</li> <li>y2 (float) - The second point's vertical position.</li> <li>x3 (float) - The third point's horizontal position.</li> <li>y3 (float) - The third point's vertical position.</li> <li>x4 (float) - The fourth point's horizontal position.</li> <li>y4 (float) - The fourth point's vertical position.</li> <li>degrees (float) - The rotation in degrees.</li> </ul>"},{"location":"documentation/Graphics.html#return_12","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_12","title":"Example","text":"<pre><code>void update()\n{\n    // draw a quad rotated by 45 degrees\n    CP_Graphics_DrawQuadAdvanced(100.0f, 100.0f,  // corner 1\n                                 200.0f, 100.0f,  // corner 2\n                                 200.0f, 150.0f,  // corner 3\n                                 100.0f, 150.0f,  // corner 4\n                                 45.0f);          // degrees rotation\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_12","title":"Related","text":"<ul> <li>CP_Graphics_DrawQuad</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_beginshape","title":"CP_Graphics_BeginShape","text":"<p>Using CP_Graphics_BeginShape(), CP_Graphics_AddVertex, and CP_Graphics_EndShape, a shape can be defined with any number of vertices. After CP_Graphics_BeginShape() is called, use CP_Graphics_AddVertex to specify the vertices of the shape. A shape will not be drawn until CP_Graphics_EndShape is called.</p>"},{"location":"documentation/Graphics.html#function_13","title":"Function","text":"<pre><code>void CP_Graphics_BeginShape(void);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_13","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Graphics.html#return_13","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_13","title":"Example","text":"<pre><code>void update()\n{\n    // Start drawing a shape\n    CP_Graphics_BeginShape();\n\n    // Specify three vertices\n    CP_Graphics_AddVertex(100.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 200.0f);\n\n   // signal the end of the shape and draw the shape\n    CP_Graphics_EndShape();\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_13","title":"Related","text":"<ul> <li>CP_Graphics_AddVertex</li> <li>CP_Graphics_EndShape</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_addvertex","title":"CP_Graphics_AddVertex","text":"<p>Using CP_Graphics_BeginShape, CP_Graphics_AddVertex, and CP_Graphics_EndShape, a shape can be defined with any number of vertices. After CP_Graphics_BeginShape is called, use CP_Graphics_AddVertex to specify the vertices of the shape. A shape will not be drawn until CP_Graphics_EndShape is called.</p>"},{"location":"documentation/Graphics.html#function_14","title":"Function","text":"<pre><code>void CP_Graphics_AddVertex(float x, float y);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_14","title":"Parameters","text":"<ul> <li>x (float) - The horizontal position of the vertex.</li> <li>y (float) - The vertical position of the vertex.</li> </ul>"},{"location":"documentation/Graphics.html#return_14","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_14","title":"Example","text":"<pre><code>void update()\n{\n    // Start drawing a shape\n    CP_Graphics_BeginShape();\n\n    // Specify three vertices\n    CP_Graphics_AddVertex(100.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 200.0f);\n\n   // signal the end of the shape and draw the shape\n    CP_Graphics_EndShape();\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_14","title":"Related","text":"<ul> <li>CP_Graphics_BeginShape</li> <li>CP_Graphics_EndShape</li> </ul>"},{"location":"documentation/Graphics.html#cp_graphics_endshape","title":"CP_Graphics_EndShape","text":"<p>Using CP_Graphics_BeginShape, CP_Graphics_AddVertex, and CP_Graphics_EndShape, a shape can be defined with any number of vertices. After CP_Graphics_BeginShape is called, use CP_Graphics_AddVertex to specify the vertices of the shape. A shape will not be drawn until CP_Graphics_EndShape is called.</p>"},{"location":"documentation/Graphics.html#function_15","title":"Function","text":"<pre><code>void CP_Graphics_EndShape(void);\n</code></pre>"},{"location":"documentation/Graphics.html#parameters_15","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Graphics.html#return_15","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Graphics.html#example_15","title":"Example","text":"<pre><code>void update()\n{\n    // Start drawing a shape\n    CP_Graphics_BeginShape();\n\n    // Specify three vertices\n    CP_Graphics_AddVertex(100.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 100.0f);\n    CP_Graphics_AddVertex(200.0f, 200.0f);\n\n   // signal the end of the shape and draw the shape\n    CP_Graphics_EndShape();\n}\n</code></pre>"},{"location":"documentation/Graphics.html#related_15","title":"Related","text":"<ul> <li>CP_Graphics_BeginShape</li> <li>CP_Graphics_AddVertex</li> </ul>"},{"location":"documentation/Image.html","title":"Image","text":"<p>This section contains all functions relating to CP_Image.</p>"},{"location":"documentation/Image.html#cp_image_load","title":"CP_Image_Load","text":"<p>Load a CP_Image by inputting the file path of the image file as a string (const char*). When finished, the image should be released using CP_Image_Free.</p>"},{"location":"documentation/Image.html#function","title":"Function","text":"<pre><code>CP_Image CP_Image_Load(const char* filepath);\n</code></pre>"},{"location":"documentation/Image.html#parameters","title":"Parameters","text":"<ul> <li>filepath (const char*) - The path to the image file that you want to load.</li> </ul>"},{"location":"documentation/Image.html#return","title":"Return","text":"<ul> <li>CP_Image - The new image created from the specified file. Will be NULL if the image could not be created.</li> </ul>"},{"location":"documentation/Image.html#example","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    CP_Image_Draw(justinFace, width / 2, height / 2, width / 2, width / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Draw</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_free","title":"CP_Image_Free","text":"<p>Free a CP_Image by giving the image that you want to free.</p>"},{"location":"documentation/Image.html#function_1","title":"Function","text":"<pre><code>void CP_Image_Free(CP_Image* img);\n</code></pre>"},{"location":"documentation/Image.html#parameters_1","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to free.</li> </ul>"},{"location":"documentation/Image.html#return_1","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_1","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    CP_Image_Draw(justinFace, width / 2, height / 2, width / 2, width / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_1","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Draw</li> <li>CP_Image_Load</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_getwidth","title":"CP_Image_GetWidth","text":"<p>Get the width in pixels of a given CP_Image.</p>"},{"location":"documentation/Image.html#function_2","title":"Function","text":"<pre><code>int CP_Image_GetWidth(CP_Image img);\n</code></pre>"},{"location":"documentation/Image.html#parameters_2","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to know the width of.</li> </ul>"},{"location":"documentation/Image.html#return_2","title":"Return","text":"<ul> <li>int - The width of the image in pixels.</li> </ul>"},{"location":"documentation/Image.html#example_2","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_Image_GetWidth(justinFace);\n\n    int windowWidth = CP_System_GetWindowWidth();\n    int windowHeight = CP_System_GetWindowHeight();\n\n    CP_Image_Draw(justinFace, windowWidth / 2, windowHeight / 2, windowWidth / 2, windowHeight / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_2","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Load</li> <li>CP_Image_Draw</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_getheight","title":"CP_Image_GetHeight","text":"<p>Get the height in pixels of a given CP_Image.</p>"},{"location":"documentation/Image.html#function_3","title":"Function","text":"<pre><code>int CP_Image_GetHeight(CP_Image img);\n</code></pre>"},{"location":"documentation/Image.html#parameters_3","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to know the height of.</li> </ul>"},{"location":"documentation/Image.html#return_3","title":"Return","text":"<ul> <li>int - The height of the image in pixels.</li> </ul>"},{"location":"documentation/Image.html#example_3","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int height = CP_Image_GetHeight(justinFace);\n\n    int windowWidth = CP_System_GetWindowWidth();\n    int windowHeight = CP_System_GetWindowHeight();\n\n    CP_Image_Draw(justinFace, windowWidth / 2, windowHeight / 2, windowWidth / 2, windowHeight / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_3","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Load</li> <li>CP_Image_Draw</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_draw","title":"CP_Image_Draw","text":"<p>Draws a given CP_Image to the screen using the given size and coordinates.</p>"},{"location":"documentation/Image.html#function_4","title":"Function","text":"<pre><code>void CP_Image_Draw(CP_Image img, float x, float y, float w, float h, int alpha);\n</code></pre>"},{"location":"documentation/Image.html#parameters_4","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to draw to the screen.</li> <li>x (float) - The x coordinate of the image in screen coordinates.</li> <li>y (float) - The y coordinate of the image in screen coordinates.</li> <li>w (float) - The width to draw the image in pixels.</li> <li>h (float) - The height to draw the image in pixels.</li> <li>alpha (float) - The alpha value to draw the image with (0-255).</li> </ul>"},{"location":"documentation/Image.html#return_4","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_4","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    CP_Image_Draw(justinFace, width / 2, height / 2, width / 2, width / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_4","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Load</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_drawadvanced","title":"CP_Image_DrawAdvanced","text":"<p>Draws a given CP_Image to the screen using the given position, size, alpha, and rotation.</p>"},{"location":"documentation/Image.html#function_5","title":"Function","text":"<pre><code>void CP_Image_DrawAdvanced(CP_Image img, float x, float y, float w, float h, int alpha, float degrees);\n</code></pre>"},{"location":"documentation/Image.html#parameters_5","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to draw to the screen.</li> <li>x (float) - The x coordinate of the image in screen coordinates.</li> <li>y (float) - The y coordinate of the image in screen coordinates.</li> <li>w (float) - The width to draw the image in pixels.</li> <li>h (float) - The height to draw the image in pixels.</li> <li>alpha (float) - The alpha value to draw the image with (0-255).</li> <li>degrees (float) - The degrees to rotate the image.</li> </ul>"},{"location":"documentation/Image.html#return_5","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_5","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    CP_Image_DrawAdvanced(justinFace, width / 2, height / 2, width / 2, width / 2, 255, 180);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_5","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_Load</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_drawsubimage","title":"CP_Image_DrawSubImage","text":"<p>Draws a given CP_Image to the screen using the given position, size, texture coordinates, and alpha.</p>"},{"location":"documentation/Image.html#function_6","title":"Function","text":"<pre><code>void CP_Image_DrawSubImage(CP_Image img, float x, float y, float w, float h, float u0, float v0, float u1, float v1, int alpha);\n</code></pre>"},{"location":"documentation/Image.html#parameters_6","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to draw to the screen.</li> <li>x (float) - The x coordinate of the image in screen coordinates.</li> <li>y (float) - The y coordinate of the image in screen coordinates.</li> <li>w (float) - The width to draw the image in pixels.</li> <li>h (float) - The height to draw the image in pixels.</li> <li>s0 (float) - The left most pixel of the sub-image(far left = 0).</li> <li>t0 (float) - The top most pixel of the sub-image (top = 0).</li> <li>s1 (float) - The right most pixel for the sub-image (far right = image width).</li> <li>t0 (float) - The bottom most pixel for the sub-image (bottom = image height).</li> <li>alpha (float) - The alpha value to draw the image with (0-255).</li> </ul>"},{"location":"documentation/Image.html#return_6","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_6","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    int imageWidth = CP_Image_GetWidth(justinFace);\n    int imageHeight = CP_Image_GetHeight(justinFace);\n\n    // draws the top left quarter of the image\n    CP_Image_DrawSubImage(justinFace, (width / 2), (height / 2), width, height, 0, 0, imageWidth / 2, imageHeight / 2, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_6","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_GetWidth</li> <li>CP_Image_GetHeight</li> <li>CP_Image_Load</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_drawsubimageadvanced","title":"CP_Image_DrawSubImageAdvanced","text":"<p>Draws a given CP_Image to the screen using the given position, size, texture coordinates, and alpha.</p>"},{"location":"documentation/Image.html#function_7","title":"Function","text":"<pre><code>void CP_Image_DrawSubImageAdvanced(CP_Image img, float x, float y, float w, float h, float u0, float v0, float u1, float v1, int alpha, float degrees);\n</code></pre>"},{"location":"documentation/Image.html#parameters_7","title":"Parameters","text":"<ul> <li>image (CP_Image) - The image that you want to draw to the screen.</li> <li>x (float) - The x coordinate of the image in screen coordinates.</li> <li>y (float) - The y coordinate of the image in screen coordinates.</li> <li>w (float) - The width to draw the image in pixels.</li> <li>h (float) - The height to draw the image in pixels.</li> <li>s0 (float) - The left most pixel of the sub-image(far left = 0).</li> <li>t0 (float) - The top most pixel of the sub-image (top = 0).</li> <li>s1 (float) - The right most pixel for the sub-image (far right = image width).</li> <li>t0 (float) - The bottom most pixel for the sub-image (bottom = image height).</li> <li>alpha (float) - The alpha value to draw the image with (0-255).</li> <li>degrees (float) - The rotation value in degrees to rotate the image with (0-360).</li> </ul>"},{"location":"documentation/Image.html#return_7","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_7","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    justinFace = CP_Image_Load(\"./Assets/Justins_face.png\");\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n    int imageWidth = CP_Image_GetWidth(justinFace);\n    int imageHeight = CP_Image_GetHeight(justinFace);\n\n    // draws the top left quarter of the image\n    CP_Image_DrawSubImageAdvanced(justinFace, (width / 2), (height / 2), width, height, 0, 0, imageWidth / 2, imageHeight / 2, 255, 90);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_7","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Image_GetWidth</li> <li>CP_Image_GetHeight</li> <li>CP_Image_Load</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_createfromdata","title":"CP_Image_CreateFromData","text":"<p>Creates a CP_Image from the given data.</p>"},{"location":"documentation/Image.html#function_8","title":"Function","text":"<pre><code>CP_Image CP_Image_CreateFromData(int w, int h, unsigned char* pixelDataInput);\n</code></pre>"},{"location":"documentation/Image.html#parameters_8","title":"Parameters","text":"<ul> <li>w (int) - The width you want the created image to be (must correspond to the size of the data given).</li> <li>h (int) - The height you want the created image to be (must correspond to the size of the data given).</li> <li>pixelDataInput (unsigned char*) - The data to use to create the new image.</li> </ul>"},{"location":"documentation/Image.html#return_8","title":"Return","text":"<ul> <li>CP_Image - A new CP_Image based on the provided data.</li> </ul>"},{"location":"documentation/Image.html#example_8","title":"Example","text":"<pre><code>CP_Image justinFace = NULL;\n\nvoid init()\n{\n    unsigned char pixelData[] = {\n        255, 0, 0, 255, 255, 0, 0, 255, // 2 red pixels\n        0, 0, 255, 255, 0, 0, 255, 255    // 2 blue pixels\n    };\n\n\n    justinFace = CP_Image_CreateFromData(2, 2, pixelData);\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    int width = CP_System_GetWindowWidth();\n    int height = CP_System_GetWindowHeight();\n\n        // draws the top left quarter of the image\n    CP_Image_Draw(justinFace, width / 2, height / 2, width, height, 255);\n}\n\nvoid shutdown()\n{\n    CP_Image_Free(justinFace);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_8","title":"Related","text":"<ul> <li>CP_Image_Draw</li> <li>CP_Image_Free</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_screenshot","title":"CP_Image_Screenshot","text":"<p>This function will capture an area of the screen and return it as a CP_Image.</p>"},{"location":"documentation/Image.html#function_9","title":"Function","text":"<pre><code>CP_Image CP_Image_Screenshot(int x, int y, int w, int h);\n</code></pre>"},{"location":"documentation/Image.html#parameters_9","title":"Parameters","text":"<ul> <li>x (int) - The X coordinate of the top left corner of the screen area to be captured.</li> <li>y (int) - The Y coordinate of the top left corner of the screen area to be captured.</li> <li>w (int) - The width of the screen area to be captured.</li> <li>h (int) - The height of the screen area to be captured.</li> </ul>"},{"location":"documentation/Image.html#return_9","title":"Return","text":"<ul> <li>CP_Image - A new CP_Image that matches the specified screen area.</li> </ul>"},{"location":"documentation/Image.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n    {\n        int windowWidth = CP_System_GetWindowWidth();\n        int windowHeight = CP_System_GetWindowHeight();\n\n        // Take a screenshot of the entire window\n        CP_Image screenshot = CP_Image_Screenshot(0, 0, windowWidth, windowHeight);\n    }\n}\n</code></pre>"},{"location":"documentation/Image.html#related_9","title":"Related","text":"<ul> <li>CP_Input_KeyTriggered</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Image.html#cp_image_getpixeldata","title":"CP_Image_GetPixelData","text":"<p>This function allows you to get an array of CP_Color variables that correspond to the pixels in a CP_Image. You must create and delete the array yourself, and its length must be the same as the number of pixels in the image (in other words, the image width times the image height).</p>"},{"location":"documentation/Image.html#function_10","title":"Function","text":"<pre><code>void CP_Image_GetPixelData(CP_Image img, CP_Color* pixelDataOutput);\n</code></pre>"},{"location":"documentation/Image.html#parameters_10","title":"Parameters","text":"<ul> <li>img (CP_Image) - The image to get the pixel data from.</li> <li>pixelDataOutput (CP_Color*) - This CP_Color array will be filled with the color data from the image.</li> </ul>"},{"location":"documentation/Image.html#return_10","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_10","title":"Example","text":"<pre><code>CP_Image myImage;\n\nvoid init()\n{\n    // Load an image\n    myImage = CP_Image_Load(\"./Assets/Tree.png\");\n\n    // Get the size of the array using the image width and height\n    int arraySize = CP_Image_GetWidth(myImage) * CP_Image_GetHeight(myImage);\n\n    // Create the array using the image size and the size of a CP_Color\n    CP_Color* colorArray = malloc(arraySize * sizeof(CP_Color));\n\n    // Get the array of pixel colors from the image\n    CP_Image_GetPixelData(myImage, colorArray);\n\n    // If any pixel is not transparent, set it to red\n    CP_Color red = CP_Color_Create(255, 0, 0, 255);\n    for (int i = 0; i &lt; arraySize; ++i)\n    {\n        if (colorArray[i].a &gt; 0)\n        {\n            colorArray[i] = red;\n        }\n    }\n\n    // Update the image with the altered pixels\n    CP_Image_UpdatePixelData(myImage, colorArray);\n\n    // Free the array memory\n    free(colorArray);\n}\n\nvoid update()\n{\n    CP_Image_Draw(myImage, 50, 100, 100, 200, 255);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_10","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Color</li> <li>CP_Image_Load</li> <li>CP_Image_GetWidth</li> <li>CP_Image_GetHeight</li> <li>CP_Image_UpdatePixelData</li> <li>CP_Image_Draw</li> </ul>"},{"location":"documentation/Image.html#cp_image_updatepixeldata","title":"CP_Image_UpdatePixelData","text":"<p>This function will replace the current pixel data in the image with the data in the array which is passed into the function. Make sure the array is at least as big as the number of pixels in the image!</p>"},{"location":"documentation/Image.html#function_11","title":"Function","text":"<pre><code>void CP_Image_UpdatePixelData(CP_Image img, CP_Color* pixelDataInput);\n</code></pre>"},{"location":"documentation/Image.html#parameters_11","title":"Parameters","text":"<ul> <li>img (CP_Image) - The image to copy the pixel data into.</li> <li>pixelDataInput (CP_Color*) - A CP_Color array that will be used to change the image pixels.</li> </ul>"},{"location":"documentation/Image.html#return_11","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Image.html#example_11","title":"Example","text":"<pre><code>CP_Image myImage;\n\nvoid init()\n{\n    // Load an image\n    myImage = CP_Image_Load(\"./Assets/Tree.png\");\n\n    // Get the size of the array using the image width and height\n    int arraySize = CP_Image_GetWidth(myImage) * CP_Image_GetHeight(myImage);\n\n    // Create the array using the image size and the size of a CP_Color\n    CP_Color* colorArray = malloc(arraySize * sizeof(CP_Color));\n\n    // Get the array of pixel colors from the image\n    CP_Image_GetPixelData(myImage, colorArray);\n\n    // If any pixel is not transparent, set it to red\n    CP_Color red = CP_Color_Create(255, 0, 0, 255);\n    for (int i = 0; i &lt; arraySize; ++i)\n    {\n        if (colorArray[i].a &gt; 0)\n        {\n            colorArray[i] = red;\n        }\n    }\n\n    // Update the image with the altered pixels\n    CP_Image_UpdatePixelData(myImage, colorArray);\n\n    // Free the array memory\n    free(colorArray);\n}\n\nvoid update()\n{\n    CP_Image_Draw(myImage, 50, 100, 100, 200, 255);\n}\n</code></pre>"},{"location":"documentation/Image.html#related_11","title":"Related","text":"<ul> <li>CP_Image</li> <li>CP_Color</li> <li>CP_Image_Load</li> <li>CP_Image_GetWidth</li> <li>CP_Image_GetHeight</li> <li>CP_Image_GetPixelData</li> </ul>"},{"location":"documentation/Input.html","title":"Input","text":"<p>This section contains all functions relating to keyboard, mouse, and gamepad input.</p>"},{"location":"documentation/Input.html#cp_input_keytriggered","title":"CP_Input_KeyTriggered","text":"<p>Returns TRUE if the specified key was just pressed this frame. Returns FALSE otherwise, including when the key is held down.</p>"},{"location":"documentation/Input.html#function","title":"Function","text":"<pre><code>CP_BOOL CP_Input_KeyTriggered(CP_KEY keyCode);\n</code></pre>"},{"location":"documentation/Input.html#parameters","title":"Parameters","text":"<ul> <li>keyCode CP_KEY - The key being checked.</li> </ul>"},{"location":"documentation/Input.html#return","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the key was pressed this frame, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the spacebar is pressed\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If spacebar is being held\n    else if (CP_Input_KeyDown(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If spacebar was just released\n    else if (CP_Input_KeyReleased(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related","title":"Related","text":"<ul> <li>CP_KEY</li> <li>CP_BOOL</li> <li>CP_Input_KeyDown</li> <li>CP_Input_KeyReleased</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_keyreleased","title":"CP_Input_KeyReleased","text":"<p>Returns TRUE if the specified key was released this frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_1","title":"Function","text":"<pre><code>CP_BOOL CP_Input_KeyReleased(CP_KEY keyCode);\n</code></pre>"},{"location":"documentation/Input.html#parameters_1","title":"Parameters","text":"<ul> <li>keyCode CP_KEY - The key being checked.</li> </ul>"},{"location":"documentation/Input.html#return_1","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the key was just released, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the spacebar is pressed\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If spacebar is being held\n    else if (CP_Input_KeyDown(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If spacebar was just released\n    else if (CP_Input_KeyReleased(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_1","title":"Related","text":"<ul> <li>CP_KEY</li> <li>CP_BOOL</li> <li>CP_Input_KeyDown</li> <li>CP_Input_KeyTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_keydown","title":"CP_Input_KeyDown","text":"<p>Returns TRUE if the specified key is down. Note: This is true on the first frame and any subsequent frames that the key may be held. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_2","title":"Function","text":"<pre><code>CP_BOOL CP_Input_KeyDown(CP_KEY keyCode);\n</code></pre>"},{"location":"documentation/Input.html#parameters_2","title":"Parameters","text":"<ul> <li>keyCode CP_KEY - The key being checked.</li> </ul>"},{"location":"documentation/Input.html#return_2","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the key is being held down, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the spacebar is pressed\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If spacebar is being held\n    else if (CP_Input_KeyDown(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If spacebar was just released\n    else if (CP_Input_KeyReleased(KEY_SPACE))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_2","title":"Related","text":"<ul> <li>CP_KEY</li> <li>CP_BOOL</li> <li>CP_Input_KeyReleased</li> <li>CP_Input_KeyTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousetriggered","title":"CP_Input_MouseTriggered","text":"<p>Returns TRUE if the specified mouse button was pressed this frame. Returns FALSE otherwise, including when the button is held down.</p>"},{"location":"documentation/Input.html#function_3","title":"Function","text":"<pre><code>CP_BOOL CP_Input_MouseTriggered(CP_MOUSE button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_3","title":"Parameters","text":"<ul> <li>button CP_MOUSE - The mouse button being checked.</li> </ul>"},{"location":"documentation/Input.html#return_3","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the button was just pressed, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the left mouse button is pressed\n    if (CP_Input_MouseTriggered(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If left mouse button is being held\n    else if (CP_Input_MouseDown(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If left mouse button was just released\n    else if (CP_Input_MouseReleased(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_3","title":"Related","text":"<ul> <li>CP_MOUSE</li> <li>CP_BOOL</li> <li>CP_Input_MouseDown</li> <li>CP_Input_MouseReleased</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousereleased","title":"CP_Input_MouseReleased","text":"<p>Returns TRUE if the specified mouse button was released this frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_4","title":"Function","text":"<pre><code>CP_BOOL CP_Input_MouseReleased(CP_MOUSE button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_4","title":"Parameters","text":"<ul> <li>button CP_MOUSE - The mouse button being checked.</li> </ul>"},{"location":"documentation/Input.html#return_4","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the button was just released, otherwise FALSE.</li> </ul>"},{"location":"documentation/Input.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the left mouse button is pressed\n    if (CP_Input_MouseTriggered(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If left mouse button is being held\n    else if (CP_Input_MouseDown(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If left mouse button was just released\n    else if (CP_Input_MouseReleased(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_4","title":"Related","text":"<ul> <li>CP_MOUSE</li> <li>CP_BOOL</li> <li>CP_Input_MouseDown</li> <li>CP_Input_MouseTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousedown","title":"CP_Input_MouseDown","text":"<p>Returns TRUE if the mouse button is pressed. Note: This is true on the first frame and any subsequent frames the button remains pressed. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_5","title":"Function","text":"<pre><code>CP_BOOL CP_Input_MouseDown(CP_MOUSE button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_5","title":"Parameters","text":"<ul> <li>button CP_MOUSE - The mouse button being checked.</li> </ul>"},{"location":"documentation/Input.html#return_5","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the button is pressed, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    // If this is the first frame the left mouse button is pressed\n    if (CP_Input_MouseTriggered(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 192, 203, 255));\n    }\n    // If left mouse button is being held\n    else if (CP_Input_MouseDown(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(25, 180, 220, 255));\n    }\n    // If left mouse button was just released\n    else if (CP_Input_MouseReleased(MOUSE_BUTTON_LEFT))\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(255, 128, 0, 255));\n    }\n    // Default state\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_5","title":"Related","text":"<ul> <li>CP_MOUSE</li> <li>CP_BOOL</li> <li>CP_Input_MouseReleased</li> <li>CP_Input_MouseTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousemoved","title":"CP_Input_MouseMoved","text":"<p>This function returns TRUE if the mouse was moved since the last frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_6","title":"Function","text":"<pre><code>CP_BOOL CP_Input_MouseMoved(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_6","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_6","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the mouse has been moved, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_6","title":"Example","text":"<pre><code>void update(void)\n{\n    if (CP_Input_MouseMoved())\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 255, 0, 255));\n    }\n    else\n    {\n        CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 255, 255));\n    }\n}\n</code></pre>"},{"location":"documentation/Input.html#related_6","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_mouseclicked","title":"CP_Input_MouseClicked","text":"<p>This function returns TRUE if the left mouse button was released this frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_7","title":"Function","text":"<pre><code>CP_Bool CP_Input_MouseClicked(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_7","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_7","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the left button was released, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_7","title":"Example","text":"<pre><code>CP_Color bgColor = CP_Color_Create(0, 255, 0, 255);\n\nvoid update(void)\n{\n    // Get a random color for the background when the mouse is clicked\n    if (CP_Input_MouseClicked())\n    {\n        bgColor = CP_Color_Create(CP_Random_RangeInt(0, 255), CP_Random_RangeInt(0, 255), CP_Random_RangeInt(0, 255), 255);\n    }\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_7","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Random_RangeInt</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousedoubleclicked","title":"CP_Input_MouseDoubleClicked","text":"<p>This function returns TRUE if the left mouse button has been double-clicked. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_8","title":"Function","text":"<pre><code>CP_Bool CP_Input_MouseDoubleClicked(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_8","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_8","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the left button was double-clicked, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_8","title":"Example","text":"<pre><code>CP_Color bgColor = CP_Color_Create(0, 255, 0, 255);\n\nvoid update(void)\n{\n    // Get a random color for the background when the mouse is double-clicked\n    if (CP_Input_MouseDoubleClicked())\n    {\n        bgColor = CP_Color_Create(CP_Random_RangeInt(0, 255), CP_Random_RangeInt(0, 255), CP_Random_RangeInt(0, 255), 255);\n    }\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_8","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Random_RangeInt</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousedragged","title":"CP_Input_MouseDragged","text":"<p>This function returns TRUE if the specified mouse button is being held while the mouse is also moved. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_9","title":"Function","text":"<pre><code>CP_Bool CP_Input_MouseDragged(CP_Mouse button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_9","title":"Parameters","text":"<ul> <li>button CP_MOUSE - The mouse button being checked.</li> </ul>"},{"location":"documentation/Input.html#return_9","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if the specified button is held and moved, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_9","title":"Example","text":"<pre><code>float delta = 0.0f;\n\nvoid update(void)\n{\n    if (CP_Input_MouseDragged(MOUSE_BUTTON_LEFT))\n    {\n        if (CP_Input_GetMouseDeltaX() &lt; 0.0f)\n        {\n            delta -= 5.0f;\n        }\n        else\n        {\n            delta += 5.0f;\n        }\n    }\n\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n    CP_Graphics_DrawCircle(CP_System_GetWindowWidth() / 2.0f + delta, (float)CP_System_GetWindowHeight() / 2.0f, 4.0f);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_9","title":"Related","text":"<ul> <li>CP_MOUSE</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Graphics_DrawCircle</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Input.html#cp_input_mousewheel","title":"CP_Input_MouseWheel","text":"<p>Returns the change in y position of the mouse wheel for the frame.</p>"},{"location":"documentation/Input.html#function_10","title":"Function","text":"<pre><code>float CP_Input_MouseWheel(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_10","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_10","title":"Return","text":"<ul> <li>float - The mouse wheel change since last frame.</li> </ul>"},{"location":"documentation/Input.html#example_10","title":"Example","text":"<pre><code>float prevMouseWheel = 0.0f;\nCP_Color bgColor = CP_Color_Create(62, 157, 189, 255);\n\nvoid update(void)\n{\n    float newMouseWheel = CP_Input_MouseWheel();\n    if (newMouseWheel &gt; prevMouseWheel)\n    {\n        bgColor.a += 1;\n    }\n    else if (newMouseWheel &lt; prevMouseWheel)\n    {\n        bgColor.a -= 1;\n    }\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_10","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousex","title":"CP_Input_GetMouseX","text":"<p>This function returns the current horizontal coordinate of the mouse. This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_11","title":"Function","text":"<pre><code>float CP_Input_GetMouseX(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_11","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_11","title":"Return","text":"<ul> <li>float - The current X position of the mouse.</li> </ul>"},{"location":"documentation/Input.html#example_11","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Graphics_DrawLine(CP_Input_GetMouseX(), 20, CP_Input_GetMouseX(), 80);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_11","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Graphics_DrawLine</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousey","title":"CP_Input_GetMouseY","text":"<p>This function returns the current vertical coordinate of the mouse. This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_12","title":"Function","text":"<pre><code>float CP_Input_GetMouseY(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_12","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_12","title":"Return","text":"<ul> <li>float - The current Y position of the mouse.</li> </ul>"},{"location":"documentation/Input.html#example_12","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Graphics_DrawLine(20, CP_Input_GetMouseY(), 80, CP_Input_GetMouseY());\n}\n</code></pre>"},{"location":"documentation/Input.html#related_12","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Graphics_DrawLine</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousepreviousx","title":"CP_Input_GetMousePreviousX","text":"<p>This function always returns the previous horizontal coordinate of the mouse. This value will be the same as CP_Input_GetMouseX the previous frame. This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_13","title":"Function","text":"<pre><code>float CP_Input_GetMousePreviousX(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_13","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_13","title":"Return","text":"<ul> <li>float - The X position of the mouse on the previous frame.</li> </ul>"},{"location":"documentation/Input.html#example_13","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Graphics_DrawLine(CP_Input_GetMouseX(), CP_Input_GetMouseY(), CP_Input_GetMousePreviousX(), CP_Input_GetMousePreviousY());\n}\n</code></pre>"},{"location":"documentation/Input.html#related_13","title":"Related","text":"<ul> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> <li>CP_Input_GetMousePreviousY</li> <li>CP_Graphics_DrawLine</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousepreviousy","title":"CP_Input_GetMousePreviousY","text":"<p>This function always returns the previous vertical coordinate of the mouse. This value will be the same as CP_Input_GetMouseY the previous frame. This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_14","title":"Function","text":"<pre><code>float CP_Input_GetMousePreviousY(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_14","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_14","title":"Return","text":"<ul> <li>float - The Y position of the mouse on the previous frame.</li> </ul>"},{"location":"documentation/Input.html#example_14","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Graphics_DrawLine(CP_Input_GetMouseX(), CP_Input_GetMouseY(), CP_Input_GetMousePreviousX(), CP_Input_GetMousePreviousY());\n}\n</code></pre>"},{"location":"documentation/Input.html#related_14","title":"Related","text":"<ul> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> <li>CP_Input_GetMousePreviousX</li> <li>CP_Graphics_DrawLine</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousedeltax","title":"CP_Input_GetMouseDeltaX","text":"<p>This function returns the difference between the mouse's horizontal coordinate on the previous frame and on this frame.</p>"},{"location":"documentation/Input.html#function_15","title":"Function","text":"<pre><code>float CP_Input_GetMouseDeltaX(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_15","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_15","title":"Return","text":"<ul> <li>float - The difference in the X position from the previous frame.</li> </ul>"},{"location":"documentation/Input.html#example_15","title":"Example","text":"<pre><code>float horizontalChange = CP_Input_GetMouseDeltaX();\n</code></pre>"},{"location":"documentation/Input.html#related_15","title":"Related","text":"<ul> <li>CP_Input_GetMouseDeltaY</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmousedeltay","title":"CP_Input_GetMouseDeltaY","text":"<p>This function returns the difference between the mouse's vertical coordinate on the previous frame and on this frame.</p>"},{"location":"documentation/Input.html#function_16","title":"Function","text":"<pre><code>float CP_Input_GetMouseDeltaY(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_16","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_16","title":"Return","text":"<ul> <li>float - The difference in the Y position from the previous frame.</li> </ul>"},{"location":"documentation/Input.html#example_16","title":"Example","text":"<pre><code>float verticalChange = CP_Input_GetMouseDeltaY();\n</code></pre>"},{"location":"documentation/Input.html#related_16","title":"Related","text":"<ul> <li>CP_Input_GetMouseDeltaX</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmouseworldx","title":"CP_Input_GetMouseWorldX","text":"<p>Returns the current horizontal coordinate of the mouse in world space. This means that the mouse position will be translated by any transformation functions called (CP_Settings_Translate, CP_Settings_Scale, CP_Settings_Rotate). This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_17","title":"Function","text":"<pre><code>float CP_Input_GetMouseWorldX(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_17","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_17","title":"Return","text":"<ul> <li>float - The X position of the mouse in world space.</li> </ul>"},{"location":"documentation/Input.html#example_17","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Settings_Translate(CP_Input_GetMouseX(), CP_Input_GetMouseY());\n    CP_Graphics_DrawLine(0, 0, CP_Input_GetMouseWorldX(), CP_Input_GetMouseWorldY());\n}\n</code></pre>"},{"location":"documentation/Input.html#related_17","title":"Related","text":"<ul> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_Settings_Translate</li> <li>CP_Graphics_DrawLine</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_getmouseworldy","title":"CP_Input_GetMouseWorldY","text":"<p>Returns the current vertical coordinate of the mouse in world space. This means that the mouse position will be translated by any transformation functions called (CP_Settings_Translate, CP_Settings_Scale, CP_Settings_Rotate). This will track the position of the mouse anywhere on the screen, even if the window is in the background.</p>"},{"location":"documentation/Input.html#function_18","title":"Function","text":"<pre><code>float CP_Input_GetMouseWorldX(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_18","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_18","title":"Return","text":"<ul> <li>float - The Y position of the mouse in world space.</li> </ul>"},{"location":"documentation/Input.html#example_18","title":"Example","text":"<pre><code>void draw()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Settings_Translate(CP_Input_GetMouseX(), CP_Input_GetMouseY());\n    CP_Graphics_DrawLine(0, 0, CP_Input_GetMouseWorldX(), CP_Input_GetMouseWorldY());\n}\n</code></pre>"},{"location":"documentation/Input.html#related_18","title":"Related","text":"<ul> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Settings_Translate</li> <li>CP_Graphics_DrawLine</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadtriggered","title":"CP_Input_GamepadTriggered","text":"<p>This function returns TRUE when the specified gamepad button has been pressed on this frame but was not pressed on the previous frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_19","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadTriggered(CP_GAMEPAD button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_19","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_19","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the button was initially pressed, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_19","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor = CP_Color_Create(255, 0, 0, 255);\n\n    if (CP_Input_GamepadTriggered(GAMEPAD_A))\n        bgColor = CP_Color_Create(0, 0, 255, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_19","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadtriggeredadvanced","title":"CP_Input_GamepadTriggeredAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return FALSE). The behavior is otherwise the same as CP_Input_GamepadTriggered.</p>"},{"location":"documentation/Input.html#function_20","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadTriggeredAdvanced(CP_GAMEPAD button, int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_20","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> <li>gamepadIndex (int) - The index of the gamepad to check.</li> </ul>"},{"location":"documentation/Input.html#return_20","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the specified button on the specified gamepad is triggered, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_20","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor = CP_Color_Create(255, 0, 0, 255);\n\n    if (CP_Input_GamepadTriggeredAdvanced(GAMEPAD_A, 0))\n        bgColor = CP_Color_Create(0, 0, 255, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_20","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadreleased","title":"CP_Input_GamepadReleased","text":"<p>This function returns TRUE when the specified button was pressed on the previous frame and is not pressed on this frame. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_21","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadReleased(CP_GAMEPAD button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_21","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_21","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the button is released, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_21","title":"Example","text":"<pre><code>CP_Color bgColor = CP_Color_Create(255, 0, 0, 255);\n\nvoid update()\n{\n    if (CP_Input_GamepadTriggered(GAMEPAD_X))\n        bgColor = CP_Color_Create(0, 0, 255, 255);\n    else if (CP_Input_GamepadReleased(GAMEPAD_X))\n        bgColor = CP_Color_Create(0, 255, 0, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_21","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Input_GamepadTriggered</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadreleasedadvanced","title":"CP_Input_GamepadReleasedAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return FALSE). The behavior is otherwise the same as CP_Input_GamepadReleased.</p>"},{"location":"documentation/Input.html#function_22","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadReleasedAdvanced(CP_GAMEPAD button, int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_22","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> <li>gamepadIndex (int) - The index of the gamepad to check.</li> </ul>"},{"location":"documentation/Input.html#return_22","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the specified button and gamepad is released, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_22","title":"Example","text":"<pre><code>CP_Color bgColor = CP_Color_Create(255, 0, 0, 255);\n\nvoid update()\n{\n    if (CP_Input_GamepadTriggeredAdvanced(GAMEPAD_X, 1))\n        bgColor = CP_Color_Create(0, 0, 255, 255);\n    else if (CP_Input_GamepadReleasedAdvanced(GAMEPAD_X, 1))\n        bgColor = CP_Color_Create(0, 255, 0, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_22","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Input_GamepadTriggeredAdvanced</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepaddown","title":"CP_Input_GamepadDown","text":"<p>This function returns TRUE when the specified gamepad button is pressed. It will continue to return TRUE as long as the button is held down. Returns FALSE otherwise.</p>"},{"location":"documentation/Input.html#function_23","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadDown(CP_GAMEPAD button);\n</code></pre>"},{"location":"documentation/Input.html#parameters_23","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_23","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the button is held down, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_23","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor;\n    if (CP_Input_GamepadDown(GAMEPAD_A))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else\n        bgColor = CP_Color_Create(166, 235, 237, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_23","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepaddownadvanced","title":"CP_Input_GamepadDownAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return FALSE). The behavior is otherwise the same as CP_Input_GamepadDown.</p>"},{"location":"documentation/Input.html#function_24","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadDownAdvanced(CP_GAMEPAD button, int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_24","title":"Parameters","text":"<ul> <li>button (CP_GAMEPAD) - The enum value corresponding to the button you want to check.</li> <li>gamepadIndex (int) - The index of the gamepad to check.</li> </ul>"},{"location":"documentation/Input.html#return_24","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE when the specified button and gamepad is held down, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_24","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor;\n    if (CP_Input_GamepadDownAdvanced(GAMEPAD_A, 2))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else\n        bgColor = CP_Color_Create(166, 235, 237, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_24","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadrighttrigger","title":"CP_Input_GamepadRightTrigger","text":"<p>Returns the current value from the gamepad's right trigger.</p>"},{"location":"documentation/Input.html#function_25","title":"Function","text":"<pre><code>float CP_Input_GamepadRightTrigger(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_25","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_25","title":"Return","text":"<ul> <li>float - The right trigger value.</li> </ul>"},{"location":"documentation/Input.html#example_25","title":"Example","text":""},{"location":"documentation/Input.html#related_25","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadrighttriggeradvanced","title":"CP_Input_GamepadRightTriggerAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return 0). The behavior is otherwise the same as CP_Input_GamepadRightTrigger.</p>"},{"location":"documentation/Input.html#function_26","title":"Function","text":"<pre><code>float CP_Input_GamepadRightTriggerAdvanced(int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_26","title":"Parameters","text":"<ul> <li>button (int) - The index of the gamepad you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_26","title":"Return","text":"<ul> <li>float - The value of the right trigger on the specified gamepad.</li> </ul>"},{"location":"documentation/Input.html#example_26","title":"Example","text":""},{"location":"documentation/Input.html#related_26","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadlefttrigger","title":"CP_Input_GamepadLeftTrigger","text":"<p>Returns the current value from the gamepad's left trigger.</p>"},{"location":"documentation/Input.html#function_27","title":"Function","text":"<pre><code>float CP_Input_GamepadLeftTrigger(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_27","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_27","title":"Return","text":"<ul> <li>float - The left trigger value.</li> </ul>"},{"location":"documentation/Input.html#example_27","title":"Example","text":""},{"location":"documentation/Input.html#related_27","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadlefttriggeradvanced","title":"CP_Input_GamepadLeftTriggerAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return 0). The behavior is otherwise the same as CP_Input_GamepadLeftTrigger.</p>"},{"location":"documentation/Input.html#function_28","title":"Function","text":"<pre><code>float CP_Input_GamepadLeftTriggerAdvanced(int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_28","title":"Parameters","text":"<ul> <li>button (int) - The index of the gamepad you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_28","title":"Return","text":"<ul> <li>float - The value of the left trigger on the specified gamepad.</li> </ul>"},{"location":"documentation/Input.html#example_28","title":"Example","text":""},{"location":"documentation/Input.html#related_28","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadrightstick","title":"CP_Input_GamepadRightStick","text":"<p>Returns a CP_Vector with the current X and Y position values from the gamepad's right stick.</p>"},{"location":"documentation/Input.html#function_29","title":"Function","text":"<pre><code>CP_Vector CP_Input_GamepadRightStick(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_29","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_29","title":"Return","text":"<ul> <li>CP_Vector - The right stick X and Y values.</li> </ul>"},{"location":"documentation/Input.html#example_29","title":"Example","text":""},{"location":"documentation/Input.html#related_29","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadrightstickadvanced","title":"CP_Input_GamepadRightStickAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return zeroes). The behavior is otherwise the same as CP_Input_GamepadRightStick.</p>"},{"location":"documentation/Input.html#function_30","title":"Function","text":"<pre><code>CP_Vector CP_Input_GamepadRightStickAdvanced(int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_30","title":"Parameters","text":"<ul> <li>button (int) - The index of the gamepad you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_30","title":"Return","text":"<ul> <li>CP_Vector - The right stick X and Y values on the specified gamepad.</li> </ul>"},{"location":"documentation/Input.html#example_30","title":"Example","text":""},{"location":"documentation/Input.html#related_30","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadleftstick","title":"CP_Input_GamepadLeftStick","text":"<p>Returns a CP_Vector with the current X and Y position values from the gamepad's left stick.</p>"},{"location":"documentation/Input.html#function_31","title":"Function","text":"<pre><code>CP_Vector CP_Input_GamepadLeftStick(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_31","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_31","title":"Return","text":"<ul> <li>CP_Vector - The left stick X and Y values.</li> </ul>"},{"location":"documentation/Input.html#example_31","title":"Example","text":""},{"location":"documentation/Input.html#related_31","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadleftstickadvanced","title":"CP_Input_GamepadLeftStickAdvanced","text":"<p>Allows you to specify the index for a specific gamepad to check. This index should be from 0 to 3 (indexes outside this range will cause the function to return zeroes). The behavior is otherwise the same as CP_Input_GamepadLeftStick.</p>"},{"location":"documentation/Input.html#function_32","title":"Function","text":"<pre><code>CP_Vector CP_Input_GamepadLeftStickAdvanced(int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_32","title":"Parameters","text":"<ul> <li>button (int) - The index of the gamepad you want to check.</li> </ul>"},{"location":"documentation/Input.html#return_32","title":"Return","text":"<ul> <li>CP_Vector - The left stick X and Y values on the specified gamepad.</li> </ul>"},{"location":"documentation/Input.html#example_32","title":"Example","text":""},{"location":"documentation/Input.html#related_32","title":"Related","text":""},{"location":"documentation/Input.html#cp_input_gamepadconnected","title":"CP_Input_GamepadConnected","text":"<p>Returns TRUE if there is a gamepad connected, and FALSE if there is not.</p>"},{"location":"documentation/Input.html#function_33","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadConnected(void);\n</code></pre>"},{"location":"documentation/Input.html#parameters_33","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Input.html#return_33","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if a gamepad is connected, FALSE if not.</li> </ul>"},{"location":"documentation/Input.html#example_33","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor;\n    if (CP_Input_GamepadConnected() &amp;&amp; CP_Input_GamepadDown(GAMEPAD_A))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else if (CP_Input_KeyDown(KEY_A))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else\n        bgColor = CP_Color_Create(166, 235, 237, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_33","title":"Related","text":"<ul> <li>CP_Input_GamepadDown</li> <li>CP_Input_KeyDown</li> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Input.html#cp_input_gamepadconnectedadvanced","title":"CP_Input_GamepadConnectedAdvanced","text":"<p>Returns TRUE if there is a gamepad connected at the specified index, and FALSE if there is not.</p>"},{"location":"documentation/Input.html#function_34","title":"Function","text":"<pre><code>CP_BOOL CP_Input_GamepadConnectedAdvanced(int gamepadIndex);\n</code></pre>"},{"location":"documentation/Input.html#parameters_34","title":"Parameters","text":"<ul> <li>button (int) - The index of the gamepad you want to check for.</li> </ul>"},{"location":"documentation/Input.html#return_34","title":"Return","text":"<ul> <li>CP_BOOL - Will be TRUE if there is a gamepad connected at the specified index, FALSE otherwise.</li> </ul>"},{"location":"documentation/Input.html#example_34","title":"Example","text":"<pre><code>void update()\n{\n    CP_Color bgColor;\n    if (CP_Input_GamepadConnectedAdvanced(0) &amp;&amp; CP_Input_GamepadDownAdvanced(GAMEPAD_A, 0))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else if (CP_Input_KeyDown(KEY_A))\n        bgColor = CP_Color_Create(18, 104, 107, 255);\n    else\n        bgColor = CP_Color_Create(166, 235, 237, 255);\n\n    CP_Graphics_ClearBackground(bgColor);\n}\n</code></pre>"},{"location":"documentation/Input.html#related_34","title":"Related","text":"<ul> <li>CP_Input_GamepadDownAdvanced</li> <li>CP_Input_KeyDown</li> <li>CP_Color</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> </ul>"},{"location":"documentation/Math.html","title":"Math","text":"<p>This section contains all Math functions.</p>"},{"location":"documentation/Math.html#cp_math_clampint","title":"CP_Math_ClampInt","text":"<p>Clamps an int to a range and returns the clamped value. If the provided int value is less than the provided min value the min value will be returned; if the provided int value is greater than the provided max value the max value will be returned; otherwise the provided int value will be returned.</p>"},{"location":"documentation/Math.html#function","title":"Function","text":"<pre><code>int CP_Math_ClampInt(int value, int min, int max);\n</code></pre>"},{"location":"documentation/Math.html#parameters","title":"Parameters","text":"<ul> <li>value (int) - The value to clamp to the input range.</li> <li>min (int) - The minimum value in the range.</li> <li>max (int) - The maximum value in the range.</li> </ul>"},{"location":"documentation/Math.html#return","title":"Return","text":"<ul> <li>int - The clamped value within the provided range.</li> </ul>"},{"location":"documentation/Math.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // Get the mouse position/canvas size ratio\n    float mx = (float)CP_Input_GetMouseWorldX() / (float)CP_System_GetWindowWidth();\n    float my = (float)CP_Input_GetMouseWorldY() / (float)CP_System_GetWindowHeight();\n\n    // Convert to 0-255 values for color\n    int r_color = (int)(mx * 255);\n    int b_color = (int)(my * 255);\n\n    // Clamp the values\n    r_color = CP_Math_ClampInt(r_color, 0, 255);\n    b_color = CP_Math_ClampInt(b_color, 0, 255);\n\n    // Set the background as the color\n    CP_Graphics_ClearBackground(CP_Color_Create(r_color, 0, b_color, 255));\n}\n</code></pre>"},{"location":"documentation/Math.html#related","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Math.html#cp_math_clampfloat","title":"CP_Math_ClampFloat","text":"<p>Clamps a float to a range and returns the clamped value. If the provided float value is less than the provided min value the min value will be returned; if the provided float value is greater than the provided max value the max value will be returned; otherwise the provided float value will be returned.</p>"},{"location":"documentation/Math.html#function_1","title":"Function","text":"<pre><code>float CP_Math_ClampFloat(float value, float min, float max);\n</code></pre>"},{"location":"documentation/Math.html#parameters_1","title":"Parameters","text":"<ul> <li>value (float) - The value to clamp to the input range.</li> <li>min (float) - The minimum value in the range.</li> <li>max (float) - The maximum value in the range.</li> </ul>"},{"location":"documentation/Math.html#return_1","title":"Return","text":"<ul> <li>float - The clamped value within the provided range.</li> </ul>"},{"location":"documentation/Math.html#example_1","title":"Example","text":"<pre><code>static CP_Color Red;\nstatic CP_Color Green;\nstatic CP_Color Blue;\nstatic CP_Color White;\n\nvoid init()\n{\n    // Create colors for the four corners of the screen\n    Red = CP_Color_Create(255, 0, 0, 255);\n    Green = CP_Color_Create(0, 255, 0, 255);\n    Blue = CP_Color_Create(0, 0, 255, 255);\n    White = CP_Color_Create(255, 255, 255, 255);\n}\n\nvoid update()\n{\n    // Get the mouse position\n    float mx = (float)CP_Input_GetMouseWorldX() / (float)CP_System_GetWindowWidth();\n    float my = (float)CP_Input_GetMouseWorldY() / (float)CP_System_GetWindowHeight();\n\n    // Clamp the values\n    mx = CP_Math_ClampFloat(mx, 0.0, 1.0);\n    my = CP_Math_ClampFloat(my, 0.0, 1.0);\n\n    // Lerp along both axis\n    CP_Color lerpx = CP_Color_Lerp(Red, Blue, mx);\n    CP_Color lerpy = CP_Color_Lerp(Green, White, my);\n\n    // Lerp them together\n    CP_Color lerp = CP_Color_Lerp(lerpx, lerpy, 0.5f);\n\n    // Set the background based on the lerp\n    CP_Graphics_ClearBackground(lerp);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_1","title":"Related","text":"<ul> <li>CP_Color</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Color_Lerp</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Math.html#cp_math_lerpint","title":"CP_Math_LerpInt","text":"<p>Linearly interpolates between two input integers with an input lerp factor. The lerp factor should be from 0.0 to 1.0.</p>"},{"location":"documentation/Math.html#function_2","title":"Function","text":"<pre><code>int CP_Math_LerpInt(int a, int b, float lerpFactor);\n</code></pre>"},{"location":"documentation/Math.html#parameters_2","title":"Parameters","text":"<ul> <li>a (int) - The value the function returns when lerp_factor is 0.0, the starting value.</li> <li>b (int) - The value the function returns when lerp_factor is 1.0, the ending value.</li> <li>lerp_factor (float) - The ratio used to determine what value to return between a and b.</li> </ul>"},{"location":"documentation/Math.html#return_2","title":"Return","text":"<ul> <li>int - The interpolated value between <code>a</code> and <code>b</code> according to <code>lerp_factor</code>.</li> </ul>"},{"location":"documentation/Math.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    // Get the mouse position/canvas size ratio\n    float mx = (float)CP_Input_GetMouseWorldX() / (float)CP_System_GetWindowWidth();\n    float my = (float)CP_Input_GetMouseWorldY() / (float)CP_System_GetWindowHeight();\n\n    // Convert to 0-255 values for color\n    int r_color = CP_Math_LerpInt(0, 255, mx);\n    int b_color = CP_Math_LerpInt(0, 255, my);\n\n    // Clamp the values\n    r_color = CP_Math_ClampInt(r_color, 0, 255);\n    b_color = CP_Math_ClampInt(b_color, 0, 255);\n\n    // Set the background as the color\n    CP_Graphics_ClearBackground(CP_Color_Create(r_color, 0, b_color, 255));\n}\n</code></pre>"},{"location":"documentation/Math.html#related_2","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Math_ClampInt</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Math.html#cp_math_lerpfloat","title":"CP_Math_LerpFloat","text":"<p>Linearly interpolates between two input floats with an input lerp factor. The lerp factor should be from 0.0 to 1.0.</p>"},{"location":"documentation/Math.html#function_3","title":"Function","text":"<pre><code>float CP_Math_LerpFloat(float a, float b, float lerpFactor);\n</code></pre>"},{"location":"documentation/Math.html#parameters_3","title":"Parameters","text":"<ul> <li>a (float) - The value the function returns when lerp_factor is 0.0, the starting value.</li> <li>b (float) - The value the function returns when lerp_factor is 1.0, the ending value.</li> <li>lerp_factor (float) - The ratio used to determine what value to return between a and b.</li> </ul>"},{"location":"documentation/Math.html#return_3","title":"Return","text":"<ul> <li>float - The interpolated value between <code>a</code> and <code>b</code> according to <code>lerp_factor</code>.</li> </ul>"},{"location":"documentation/Math.html#example_3","title":"Example","text":"<pre><code>CP_Image justin_face;\n\nvoid init()\n{\n    justin_face = CP_Image_Load(\"Assets/mdjustin1.png\");\n}\n\nfloat rot_counter = 0;\nvoid update()\n{\n    // Increment rotation lerp factor or reset\n    if (rot_counter &gt;= 1.0f)\n        rot_counter -= 1.0f;\n    else\n        rot_counter += CP_System_GetDt();\n\n    // Lerp rotation and draw image\n    float rotation = CP_Math_LerpFloat(0.0f, 360.0f, rot_counter);\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n    CP_Image_DrawAdvanced(justin_face, CP_Input_GetMouseWorldX(), CP_Input_GetMouseWorldY(), 100, 150, 255, rotation);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_3","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Image_Load</li> <li>CP_Image_DrawAdvanced</li> <li>CP_Input_GetMouseWorldX</li> <li>CP_Input_GetMouseWorldY</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Math.html#cp_math_square","title":"CP_Math_Square","text":"<p>Takes in a float and returns its squared value.</p>"},{"location":"documentation/Math.html#function_4","title":"Function","text":"<pre><code>float CP_Math_Square(float number);\n</code></pre>"},{"location":"documentation/Math.html#parameters_4","title":"Parameters","text":"<ul> <li>number (float) - The number to square.</li> </ul>"},{"location":"documentation/Math.html#return_4","title":"Return","text":"<ul> <li>float - The squared value.</li> </ul>"},{"location":"documentation/Math.html#example_4","title":"Example","text":"<pre><code>void square_init()\n{\n    CP_Settings_Fill(CP_Color_Create(0, 0, 0, 255));\n    CP_Settings_TextAlignment(CP_ALIGN_H_CENTER, CP_ALIGN_V_BOTTOM);\n}\n\nfloat random_value = 0.0f;\nfloat time_elapsed = 1.5;\nvoid square_update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    if (time_elapsed &gt;= 1.5f)\n    {\n        random_value = CP_Random_RangeFloat(0.0f, 100.0f);\n        time_elapsed = 0.0f;\n    }\n    else\n        time_elapsed += dt();\n\n    char num_string[128] = { 0 };\n    sprintf_s(num_string, 128, \"The square of %.2f is %.2f\", random_value, CP_Math_Square(random_value));\n    CP_Font_DrawTextBox(num_string, 0, canvasHeight / 2, canvasWidth);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_4","title":"Related","text":"<ul> <li>CP_Settings_Fill</li> <li>CP_Settings_TextAlignment</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Random_RangeFloat</li> <li>CP_Font_DrawTextBox</li> </ul>"},{"location":"documentation/Math.html#cp_math_distance","title":"CP_Math_Distance","text":"<p>This function returns the distance between two provided points.</p>"},{"location":"documentation/Math.html#function_5","title":"Function","text":"<pre><code>float CP_Math_Distance(float x1, float y1, float x2, float y2);\n</code></pre>"},{"location":"documentation/Math.html#parameters_5","title":"Parameters","text":"<ul> <li>x1 (float) - The X coordinate of the first point.</li> <li>y1 (float) - The Y coordinate of the first point.</li> <li>x2 (float) - The X coordinate of the second point.</li> <li>y2 (float) - The Y coordinate of the second point.</li> </ul>"},{"location":"documentation/Math.html#return_5","title":"Return","text":"<ul> <li>float - The distance between the two provided points.</li> </ul>"},{"location":"documentation/Math.html#example_5","title":"Example","text":"<pre><code>float startPointX = 20.0;\nfloat startPointY = 350.0;\nfloat endPointX = CP_Input_GetMouseX();\nfloat endPointY = CP_Input_GetMouseY();\n\nfloat distance = CP_Math_Distance(startPointX, startPointY, endPointX, endPointY);\n</code></pre>"},{"location":"documentation/Math.html#related_5","title":"Related","text":"<ul> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Math.html#cp_math_degrees","title":"CP_Math_Degrees","text":"<p>Takes an input number of radians as a float, then returns it converted to degrees as a float.</p>"},{"location":"documentation/Math.html#function_6","title":"Function","text":"<pre><code>float CP_Math_Degrees(float radians);\n</code></pre>"},{"location":"documentation/Math.html#parameters_6","title":"Parameters","text":"<ul> <li>radians (float) - The angle to convert to degrees from radians.</li> </ul>"},{"location":"documentation/Math.html#return_6","title":"Return","text":"<ul> <li>float - The provided angle converted to degrees.</li> </ul>"},{"location":"documentation/Math.html#example_6","title":"Example","text":"<pre><code>float r_radians;\nfloat counter = 2.0f;\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Change degrees every few seconds\n    if (counter &gt;= 2.0f)\n    {\n        r_radians = CP_Random_RangeFloat(0.0f, PI);\n        counter = 0.0f;\n    }\n    else\n        counter += CP_System_GetDt();\n\n    // Print out number of radians and convert to degrees\n    char buffer[128] = { 0 };\n    sprintf_s(buffer, 128, \"Radians: %.3f\\nis equal to\\nDegrees: %.3f\", r_radians, CP_Math_Degrees(r_radians));\n    CP_Font_DrawTextBox(buffer, 100, 150, 200);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_6","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_EllipseMode</li> <li>CP_Settings_Fill</li> <li>CP_Font_Set</li> <li>CP_Font_DrawTextBox</li> <li>CP_System_GetDt</li> <li>CP_Random_RangeFloat</li> </ul>"},{"location":"documentation/Math.html#cp_math_radians","title":"CP_Math_Radians","text":"<p>Takes an input number of degrees as a float, then returns it converted to radians as a float.</p>"},{"location":"documentation/Math.html#function_7","title":"Function","text":"<pre><code>float CP_Math_Radians(float degrees);\n</code></pre>"},{"location":"documentation/Math.html#parameters_7","title":"Parameters","text":"<ul> <li>degrees (float) - The angle to convert to radians from degrees.</li> </ul>"},{"location":"documentation/Math.html#return_7","title":"Return","text":"<ul> <li>float - The provided angle converted to radians.</li> </ul>"},{"location":"documentation/Math.html#example_7","title":"Example","text":"<pre><code>float r_degrees;\nfloat counter = 2.0f;\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Change degrees every few seconds\n    if (counter &gt;= 2.0f)\n    {\n        r_degrees = CP_Random_RangeFloat(0.0f, 360.0f);\n        counter = 0.0f;\n    }\n    else\n        counter += CP_System_GetDt();\n\n    // Print out number of degrees and convert to radians\n    char buffer[128] = { 0 };\n    sprintf_s(buffer, 128, \"Degrees: %.3f\\nis equal to\\nRadians: %.3f\", r_degrees, CP_Math_Radians(r_degrees));\n    CP_Font_DrawTextBox(buffer, 100, 150, 200);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_7","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_EllipseMode</li> <li>CP_Settings_Fill</li> <li>CP_Font_Set</li> <li>CP_Font_DrawTextBox</li> <li>CP_System_GetDt</li> <li>CP_Random_RangeFloat</li> </ul>"},{"location":"documentation/Math.html#cp_math_screentoworld","title":"CP_Math_ScreenToWorld","text":"<p>Takes a given set of coordinates in screen space and transforms it to world coordinates. This means that the provided position will be translated by any transformation functions called (CP_Settings_Translate, CP_Settings_Scale, CP_Settings_Rotate).</p>"},{"location":"documentation/Math.html#function_8","title":"Function","text":"<pre><code>void CP_Math_ScreenToWorld(float xIn, float yIn, float* xOut, float* yOut);\n</code></pre>"},{"location":"documentation/Math.html#parameters_8","title":"Parameters","text":"<ul> <li>xIn (float) - The x coordinate to convert.</li> <li>yIn (float) - The y coordinate to convert.</li> <li>xOut (float*) - The variable to store the converted x coordinate.</li> <li>yOut (float*) - The variable to store the converted y coordinate.</li> </ul>"},{"location":"documentation/Math.html#return_8","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Math.html#example_8","title":"Example","text":"<pre><code>void init()\n{\n    // Variables to pass into the conversion functions\n    float x = PI;\n    float y = PI;\n\n    // Run back and forth 100 times\n    for (int i = 0; i &lt; 100; ++i)\n    {\n        CP_Math_ScreenToWorld(x, y, &amp;x, &amp;y);\n        CP_Math_WorldToScreen(x, y, &amp;x, &amp;y);\n    }\n\n    // Should still be PI\n    printf(\" %9f\\n(%9f,%9f)\\n\", PI, x, y);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_8","title":"Related","text":"<ul> <li>CP_Math_WorldToScreen</li> </ul>"},{"location":"documentation/Math.html#cp_math_worldtoscreen","title":"CP_Math_WorldToScreen","text":"<p>Takes given set of coordinates in world space and transforms it to screen coordinates. This means that the provided position will be translated by any transformation functions called (CP_Settings_Translate, CP_Settings_Scale, CP_Settings_Rotate).</p>"},{"location":"documentation/Math.html#function_9","title":"Function","text":"<pre><code>void CP_Math_WorldToScreen)(float xIn, float yIn, float* xOut, float* yOut);\n</code></pre>"},{"location":"documentation/Math.html#parameters_9","title":"Parameters","text":"<ul> <li>xIn (float) - The x coordinate to convert.</li> <li>yIn (float) - The y coordinate to convert.</li> <li>xOut (float*) - The variable to store the converted x coordinate.</li> <li>yOut (float*) - The variable to store the converted y coordinate.</li> </ul>"},{"location":"documentation/Math.html#return_9","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Math.html#example_9","title":"Example","text":"<pre><code>void init()\n{\n    // Variables to pass into the conversion functions\n    float x = PI;\n    float y = PI;\n\n    // Run back and forth 100 times\n    for (int i = 0; i &lt; 100; ++i)\n    {\n        CP_Math_ScreenToWorld(x, y, &amp;x, &amp;y);\n        CP_Math_WorldToScreen(x, y, &amp;x, &amp;y);\n    }\n\n    // Should still be PI\n    printf(\" %9f\\n(%9f,%9f)\\n\", PI, x, y);\n}\n</code></pre>"},{"location":"documentation/Math.html#related_9","title":"Related","text":"<ul> <li>CP_Math_ScreenToWorld</li> </ul>"},{"location":"documentation/Matrix.html","title":"Matrix","text":"<p>This section contains all functions relating to CP_Matrix.</p>"},{"location":"documentation/Matrix.html#cp_matrix_set","title":"CP_Matrix_Set","text":"<p>Creates a CP_Matrix from the given values.</p>"},{"location":"documentation/Matrix.html#function","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Set(float m00, float m01, float m02,\n                        float m10, float m11, float m12,\n                        float m20, float m21, float m22);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters","title":"Parameters","text":"<ul> <li>mXY (float) - The 'X' corresponds to the row, the 'Y' corresponds to the column.</li> </ul> <p>Diagram: [m00][m01][m02] [m10][m11][m12] [m20][m21][m22]</p>"},{"location":"documentation/Matrix.html#return","title":"Return","text":"<ul> <li>CP_Matrix - The matrix created from the given inputs.</li> </ul>"},{"location":"documentation/Matrix.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // Create transformation matrices\n    CP_Matrix trans = CP_Matrix_Set(1.0f, 0,    CP_System_GetWindowWidth() / 2.0f,\n                                    0,    1.0f, CP_System_GetWindowHeight() / 2.0f,\n                                    0,    0,    1.0f);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_identity","title":"CP_Matrix_Identity","text":"<p>Creates a CP_Matrix which is a 3x3 identity matrix.</p>"},{"location":"documentation/Matrix.html#function_1","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Identity();\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_1","title":"Parameters","text":"<p>This function does not have any parameters</p>"},{"location":"documentation/Matrix.html#return_1","title":"Return","text":"<ul> <li>CP_Matrix - A 3x3 identity matrix.</li> </ul>"},{"location":"documentation/Matrix.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n    // Create transformation matrices\n    CP_Matrix mat = CP_Matrix_Identity();\n    mat = CP_Matrix_Multiply(mat, CP_Matrix_Rotate(25));\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_1","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Matrix_Multiply</li> <li>CP_Matrix_Rotate</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_fromvector","title":"CP_Matrix_FromVector","text":"<p>Creates a CP_Matrix by inputting each column of the matrix from the given CP_Vector variables. The bottom row of the matrix will be set to (0, 0, 1).</p>"},{"location":"documentation/Matrix.html#function_2","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_FromVector(CP_Vector col0, CP_Vector col1, CP_Vector col2);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_2","title":"Parameters","text":"<ul> <li>col0 (CP_Vector) - The first column in the matrix.</li> <li>col1 (CP_Vector) - The second column in the matrix.</li> <li>col2 (CP_Vector) - The third column in the matrix.</li> </ul>"},{"location":"documentation/Matrix.html#return_2","title":"Return","text":"<ul> <li>CP_Matrix - A 3x3 CP_Matrix with the given columns.</li> </ul>"},{"location":"documentation/Matrix.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector col1 = CP_Vector_Set(0, 1);\n    CP_Vector col2 = CP_Vector_Set(-1, 0);\n    CP_Vector col3 = CP_Vector_Set(45, 20);\n\n    // Create transformation matrices\n    CP_Matrix mat = CP_Matrix_FromVector(col1, col2, col3);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_2","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_scale","title":"CP_Matrix_Scale","text":"<p>Creates a CP_Matrix used for scaling from the given CP_Vector.</p>"},{"location":"documentation/Matrix.html#function_3","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Scale(CP_Vector scale);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_3","title":"Parameters","text":"<ul> <li>scale (CP_Vector) - The x and y scale that you want the matrix to hold.</li> </ul>"},{"location":"documentation/Matrix.html#return_3","title":"Return","text":"<ul> <li>CP_Matrix - A matrix that can be used to scale other matrices/vectors by the given amounts.</li> </ul>"},{"location":"documentation/Matrix.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat = CP_Matrix_Scale(CP_Vector_Set(5, 2));\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_3","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_translate","title":"CP_Matrix_Translate","text":"<p>Creates a translation CP_Matrix using the given CP_Vector.</p>"},{"location":"documentation/Matrix.html#function_4","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Translate(CP_Vector translation);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_4","title":"Parameters","text":"<ul> <li>translation (CP_Vector) - The x and y translation that you want the matrix to hold.</li> </ul>"},{"location":"documentation/Matrix.html#return_4","title":"Return","text":"<ul> <li>CP_Matrix - A translation matrix using the given values.</li> </ul>"},{"location":"documentation/Matrix.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat = CP_Matrix_Translate(CP_Vector_Set(20, 45));\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_4","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_rotate","title":"CP_Matrix_Rotate","text":"<p>Creates a rotation CP_Matrix using the given angle in degrees.</p>"},{"location":"documentation/Matrix.html#function_5","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Rotate(float degrees);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_5","title":"Parameters","text":"<ul> <li>degrees (float) - The number of degrees of rotation you want to matrix to apply.</li> </ul>"},{"location":"documentation/Matrix.html#return_5","title":"Return","text":"<ul> <li>CP_Matrix - A rotation matrix using the given angle.</li> </ul>"},{"location":"documentation/Matrix.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat = CP_Matrix_Rotate(45);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_5","title":"Related","text":"<ul> <li>CP_Matrix</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_rotateradians","title":"CP_Matrix_RotateRadians","text":"<p>Creates a rotation CP_Matrix using the given angle in radians.</p>"},{"location":"documentation/Matrix.html#function_6","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_RotateRadians(float radians);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_6","title":"Parameters","text":"<ul> <li>radians (float) - The rotation angle in radians you want to matrix to apply.</li> </ul>"},{"location":"documentation/Matrix.html#return_6","title":"Return","text":"<ul> <li>CP_Matrix - A rotation matrix using the given angle.</li> </ul>"},{"location":"documentation/Matrix.html#example_6","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat = CP_Matrix_RotateRadians((float)M_PI / 2);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_6","title":"Related","text":"<ul> <li>CP_Matrix</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_transpose","title":"CP_Matrix_Transpose","text":"<p>Creates a CP_Matrix that is the transposition of the given CP_Matrix.</p>"},{"location":"documentation/Matrix.html#function_7","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Transpose(CP_Matrix matrix);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_7","title":"Parameters","text":"<ul> <li>matrix (CP_Matrix) - The matrix you want to transpose.</li> </ul>"},{"location":"documentation/Matrix.html#return_7","title":"Return","text":"<ul> <li>CP_Matrix - The transposition of the given matrix.</li> </ul>"},{"location":"documentation/Matrix.html#example_7","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat1 = CP_Matrix_Set(0, -1, 20, 1, 0, 10, 0, 0, 1);\n    CP_Matrix transposed = CP_Matrix_Transpose(mat1);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_7","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Matrix_Set</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_inverse","title":"CP_Matrix_Inverse","text":"<p>Creates a CP_Matrix that is the inverse of the given CP_Matrix.</p>"},{"location":"documentation/Matrix.html#function_8","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Inverse(CP_Matrix matrix);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_8","title":"Parameters","text":"<ul> <li>matrix (CP_Matrix) - The matrix you want to inverse.</li> </ul>"},{"location":"documentation/Matrix.html#return_8","title":"Return","text":"<ul> <li>CP_Matrix - The inverse of the given matrix.</li> </ul>"},{"location":"documentation/Matrix.html#example_8","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat1 = CP_Matrix_Set(0, -1, 20, 1, 0, 10, 0, 0, 1);\n    CP_Matrix inveresed = CP_Matrix_Inverse(mat1);\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_8","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Matrix_Set</li> </ul>"},{"location":"documentation/Matrix.html#cp_matrix_multiply","title":"CP_Matrix_Multiply","text":"<p>Creates a new CP_Matrix that is the result of multiplying the given matrices.</p>"},{"location":"documentation/Matrix.html#function_9","title":"Function","text":"<pre><code>CP_Matrix CP_Matrix_Multiply(CP_Matrix mat1, CP_Matrix mat2);\n</code></pre>"},{"location":"documentation/Matrix.html#parameters_9","title":"Parameters","text":"<ul> <li>mat1 (CP_Matrix) - The matrix on the left of the multiplication.</li> <li>mat2 (CP_Matrix) - The matrix on the right side of the multiplication.</li> </ul>"},{"location":"documentation/Matrix.html#return_9","title":"Return","text":"<ul> <li>CP_Matrix - The result of mat1 * mat2.</li> </ul>"},{"location":"documentation/Matrix.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    CP_Matrix mat1 = CP_Matrix_Set(0, -1, 20, 1, 0, 10, 0, 0, 1);\n    CP_Matrix inversed = CP_Matrix_Inverse(mat1);\n    CP_Matrix multiply = CP_Matrix_Multiply(mat1, inversed); // Gives identity matrix\n}\n</code></pre>"},{"location":"documentation/Matrix.html#related_9","title":"Related","text":"<ul> <li>CP_Matrix</li> <li>CP_Matrix_Set</li> <li>CP_Matrix_Inverse</li> </ul>"},{"location":"documentation/Random.html","title":"Random","text":"<p>This section contains all Random functions.</p>"},{"location":"documentation/Random.html#cp_random_getbool","title":"CP_Random_GetBool","text":"<p>Returns a random TRUE or FALSE CP_Bool.</p>"},{"location":"documentation/Random.html#function","title":"Function","text":"<pre><code>CP_Bool CP_Random_GetBool();\n</code></pre>"},{"location":"documentation/Random.html#parameters","title":"Parameters","text":"<p>This function has no parameters</p>"},{"location":"documentation/Random.html#return","title":"Return","text":"<ul> <li>CP_Bool - Will be randomly TRUE or FALSE.</li> </ul>"},{"location":"documentation/Random.html#example","title":"Example","text":"<pre><code>void update()\n{\n    CP_Bool bool = CP_Random_GetBool();\n}\n</code></pre>"},{"location":"documentation/Random.html#related","title":"Related","text":"<ul> <li>CP_Bool</li> </ul>"},{"location":"documentation/Random.html#cp_random_getint","title":"CP_Random_GetInt","text":"<p>Returns a random unsigned integer. The returned value will be between 0 and the maximum unsigned int value.</p>"},{"location":"documentation/Random.html#function_1","title":"Function","text":"<pre><code>unsigned int CP_Random_GetInt();\n</code></pre>"},{"location":"documentation/Random.html#parameters_1","title":"Parameters","text":"<p>This function has no parameters</p>"},{"location":"documentation/Random.html#return_1","title":"Return","text":"<ul> <li>unsigned int - The random value.</li> </ul>"},{"location":"documentation/Random.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n    unsigned int random_int = CP_Random_GetInt();\n}\n</code></pre>"},{"location":"documentation/Random.html#related_1","title":"Related","text":"<ul> <li>CP_Random_RangeInt</li> </ul>"},{"location":"documentation/Random.html#cp_random_rangeint","title":"CP_Random_RangeInt","text":"<p>Returns a random integer equal to or between the two given values.</p>"},{"location":"documentation/Random.html#function_2","title":"Function","text":"<pre><code>int CP_Random_RangeInt(int lowerbound, int higherbound);\n</code></pre>"},{"location":"documentation/Random.html#parameters_2","title":"Parameters","text":"<ul> <li>lowerbound (unsigned int) - The minimum value of the random number.</li> <li>higherbound (unsigned int) - The maximum value of the random number.</li> </ul>"},{"location":"documentation/Random.html#return_2","title":"Return","text":"<ul> <li>unsigned int - A randomly valued unsigned int equal to or between the given bounds.</li> </ul>"},{"location":"documentation/Random.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    unsigned int random_int = CP_Random_RangeInt(100, 200);\n}\n</code></pre>"},{"location":"documentation/Random.html#related_2","title":"Related","text":"<ul> <li>CP_Random_GetInt</li> </ul>"},{"location":"documentation/Random.html#cp_random_getfloat","title":"CP_Random_GetFloat","text":"<p>Returns a random float value from 0.0 to 1.0.</p>"},{"location":"documentation/Random.html#function_3","title":"Function","text":"<pre><code>float CP_Random_GetFloat();\n</code></pre>"},{"location":"documentation/Random.html#parameters_3","title":"Parameters","text":"<p>This function has no parameters</p>"},{"location":"documentation/Random.html#return_3","title":"Return","text":"<ul> <li>float - A randomly valued float between 0.0 and 1.0.</li> </ul>"},{"location":"documentation/Random.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    float random_float = CP_Random_GetFloat();\n}\n</code></pre>"},{"location":"documentation/Random.html#related_3","title":"Related","text":"<ul> <li>CP_Random_RangeFloat</li> </ul>"},{"location":"documentation/Random.html#cp_random_rangefloat","title":"CP_Random_RangeFloat","text":"<p>Returns a random float equal to or between the two given values.</p>"},{"location":"documentation/Random.html#function_4","title":"Function","text":"<pre><code>float CP_Random_RangeFloat(float lowerbound, float higherbound);\n</code></pre>"},{"location":"documentation/Random.html#parameters_4","title":"Parameters","text":"<ul> <li>lowerbound (float) - The minimum value of the random number.</li> <li>higherbound (float) - The maximum value of the random number</li> </ul>"},{"location":"documentation/Random.html#return_4","title":"Return","text":"<ul> <li>float - A randomly valued float equal to or between the given bounds.</li> </ul>"},{"location":"documentation/Random.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    float random_float = CP_Random_RangeFloat(50.6f, 60);\n}\n</code></pre>"},{"location":"documentation/Random.html#related_4","title":"Related","text":"<ul> <li>CP_Random_GetFloat</li> </ul>"},{"location":"documentation/Random.html#cp_random_seed","title":"CP_Random_Seed","text":"<p>Set the seed used for generating random numbers.</p>"},{"location":"documentation/Random.html#function_5","title":"Function","text":"<pre><code>void CP_Random_Seed(int seed);\n</code></pre>"},{"location":"documentation/Random.html#parameters_5","title":"Parameters","text":"<ul> <li>seed (int) - The seed that you want to give to the random number generator.</li> </ul>"},{"location":"documentation/Random.html#return_5","title":"Return","text":"<p>This function does not return anything</p>"},{"location":"documentation/Random.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n     CP_Random_Seed(5);\n}\n</code></pre>"},{"location":"documentation/Random.html#related_5","title":"Related","text":""},{"location":"documentation/Random.html#cp_random_gaussian","title":"CP_Random_Gaussian","text":"<p>Returns a normally distributed random value where the median is 0 and the standard deviation is 1.</p>"},{"location":"documentation/Random.html#function_6","title":"Function","text":"<pre><code>float CP_Random_Gaussian(void);\n</code></pre>"},{"location":"documentation/Random.html#parameters_6","title":"Parameters","text":"<p>This function does not have any parameters</p>"},{"location":"documentation/Random.html#return_6","title":"Return","text":"<ul> <li>float - The randomly distributed value.</li> </ul>"},{"location":"documentation/Random.html#example_6","title":"Example","text":"<pre><code>void update()\n{\n    float random_v = CP_Random_Gaussian();\n}\n</code></pre>"},{"location":"documentation/Random.html#related_6","title":"Related","text":""},{"location":"documentation/Random.html#cp_random_noise","title":"CP_Random_Noise","text":"<p>Returns a smooth random value from 0.0 to 1.0 based on a three dimensional coordinate.</p>"},{"location":"documentation/Random.html#function_7","title":"Function","text":"<pre><code>float CP_Random_Noise(float x, float y, float z);\n</code></pre>"},{"location":"documentation/Random.html#parameters_7","title":"Parameters","text":"<ul> <li>x (float) - The x coordinate of the value.</li> <li>y (float) - The y coordinate of the value.</li> <li>z (float) - The z coordinate of the value.</li> </ul>"},{"location":"documentation/Random.html#return_7","title":"Return","text":"<ul> <li>float - The smoothly distributed value.</li> </ul>"},{"location":"documentation/Random.html#example_7","title":"Example","text":"<pre><code>void update()\n{\n    float random_noise = CP_Random_Noise(.3f, .4f, .5f);\n}\n</code></pre>"},{"location":"documentation/Random.html#related_7","title":"Related","text":"<ul> <li>CP_Random_NoiseSeed</li> </ul>"},{"location":"documentation/Random.html#cp_random_noiseseed","title":"CP_Random_NoiseSeed","text":"<p>Sets a seed value for the values returned by CP_Random_Noise.</p>"},{"location":"documentation/Random.html#function_8","title":"Function","text":"<pre><code>void CP_Random_NoiseSeed(int seed);\n</code></pre>"},{"location":"documentation/Random.html#parameters_8","title":"Parameters","text":"<ul> <li>seed (int) - The seed to use when distributing noise values.</li> </ul>"},{"location":"documentation/Random.html#return_8","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Random.html#example_8","title":"Example","text":"<pre><code>void update()\n{\n    CP_Random_NoiseSeed(129);\n}\n</code></pre>"},{"location":"documentation/Random.html#related_8","title":"Related","text":"<ul> <li>CP_Random_Noise</li> </ul>"},{"location":"documentation/Settings.html","title":"Settings","text":"<p>This section contains all Settings functions.</p>"},{"location":"documentation/Settings.html#cp_settings_fill","title":"CP_Settings_Fill","text":"<p>This function sets the color of all subsequently drawn shapes or text.</p>"},{"location":"documentation/Settings.html#function","title":"Function","text":"<pre><code>void CP_Settings_Fill(CP_Color c);\n</code></pre>"},{"location":"documentation/Settings.html#parameters","title":"Parameters","text":"<ul> <li>c (CP_Color) - The color to use for shapes and text.</li> </ul>"},{"location":"documentation/Settings.html#return","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // Create the color blue\n    CP_Color myColor = CP_Color_Create(0, 0, 255, 255);\n\n    // Set the shape color to blue\n    CP_Settings_Fill(myColor);\n\n    // Draw a rectangle at the origin\n    CP_Graphics_DrawRect(0, 0, 10.0f, 10.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_nofill","title":"CP_Settings_NoFill","text":"<p>This function will draw all subsequently drawn shapes without a fill color.</p>"},{"location":"documentation/Settings.html#function_1","title":"Function","text":"<pre><code>void CP_Settings_NoFill(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_1","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_1","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n    // Do not fill the shape\n    CP_Settings_NoFill();\n\n    // Draw a rectangle at the cursor position\n    CP_Graphics_DrawRect(mouseX, mouseY, 10.0f, 10.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_1","title":"Related","text":"<ul> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_stroke","title":"CP_Settings_Stroke","text":"<p>This function sets the color of the stroke for subsequently drawn shapes.</p>"},{"location":"documentation/Settings.html#function_2","title":"Function","text":"<pre><code>void CP_Settings_Stroke(CP_Color c);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_2","title":"Parameters","text":"<ul> <li>c (CP_Color) - The color to set the stroke to.</li> </ul>"},{"location":"documentation/Settings.html#return_2","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    // Create the color red\n    CP_Color myColor = CP_Color_Create(255, 0, 0, 255);\n\n    // Set the stroke color to red\n    CP_Settings_Stroke(myColor);\n\n    // Draw a circle at the cursor position\n    CP_Graphics_DrawCircle(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 10.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_2","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Graphics_DrawCircle</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_nostroke","title":"CP_Settings_NoStroke","text":"<p>This function will draw all subsequently drawn shapes without a stroke.</p>"},{"location":"documentation/Settings.html#function_3","title":"Function","text":"<pre><code>void CP_Settings_NoStroke(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_3","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_3","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    // Do not draw a stroke around the next shape\n    CP_Settings_NoStroke();\n\n    // Draw a circle at the cursor position\n    CP_Graphics_DrawCircle(CP_Input_GetMouseX(), CP_Input_GetMouseY(), 10.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_3","title":"Related","text":"<ul> <li>CP_Graphics_DrawCircle</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_strokeweight","title":"CP_Settings_StrokeWeight","text":"<p>This function modifies the thickness of all subsequently drawn shapes' stroke.</p>"},{"location":"documentation/Settings.html#function_4","title":"Function","text":"<pre><code>void CP_Settings_StrokeWeight(float weight);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_4","title":"Parameters","text":"<ul> <li>width (float) - The thickness to set the stroke to.</li> </ul>"},{"location":"documentation/Settings.html#return_4","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    // Sets the stroke of the next drawn shape to 1\n    CP_Settings_StrokeWeight(1.0f);\n\n    // Draw a circle at the origin\n    CP_Graphics_DrawCircle(0, 0, 10.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_4","title":"Related","text":"<ul> <li>CP_Graphics_DrawCircle</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_tint","title":"CP_Settings_Tint","text":"<p>Sets a color which will be applied to everything that is drawn on the screen.</p>"},{"location":"documentation/Settings.html#function_5","title":"Function","text":"<pre><code>void CP_Settings_Tint(CP_Color c);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_5","title":"Parameters","text":"<ul> <li>c (CP_Color) - The color that will be overlaid on the screen.</li> </ul>"},{"location":"documentation/Settings.html#return_5","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_5","title":"Example","text":"<pre><code>void init()\n{\n    // Set the tint to partially transparent green\n    CP_Settings_Tint(CP_Color_Create(0, 255, 0, 150));\n\n    // Set the fill color to white\n    CP_Settings_Fill(CP_Color_Create(255, 255, 255, 255));\n}\n\nvoid update()\n{\n    // Draw a white circle. It will look green because of the tint color.\n    CP_Graphics_DrawCircle(200, 200, 100);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_5","title":"Related","text":"<ul> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawCircle</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_notint","title":"CP_Settings_NoTint","text":"<p>Removes any tint color that may have been set previously.</p>"},{"location":"documentation/Settings.html#function_6","title":"Function","text":"<pre><code>void CP_Settings_NoTint(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_6","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_6","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_6","title":"Example","text":"<pre><code>void init()\n{\n    // Set the tint to partially transparent green\n    CP_Settings_Tint(CP_Color_Create(0, 255, 0, 150));\n\n    // Set the fill color to white\n    CP_Settings_Fill(CP_Color_Create(255, 255, 255, 255));\n}\n\nvoid update()\n{\n    // Remove the tint color when the mouse is clicked\n    if (CP_Input_MouseClicked())\n        CP_Settings_NoTint();\n\n    CP_Graphics_DrawCircle(200, 200, 100);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_6","title":"Related","text":"<ul> <li>CP_Settings_Tint</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawCircle</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_antialias","title":"CP_Settings_AntiAlias","text":"<p>This function allows you to turn anti-aliasing on or off. When on, everything drawn on screen will have the edges slightly smoothed. The default behavior if this function is not called is to have anti-aliasing turned on.</p>"},{"location":"documentation/Settings.html#function_7","title":"Function","text":"<pre><code>void CP_Settings_AntiAlias(CP_BOOL antiAlias);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_7","title":"Parameters","text":"<ul> <li>antiAlias (CP_BOOL) - The TRUE or FALSE variable that sets whether anti-aliasing is on or not.</li> </ul>"},{"location":"documentation/Settings.html#return_7","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_7","title":"Example","text":"<pre><code>void update()\n{\n    // Turn anti-aliasing on when the mouse is single-clicked\n    if (CP_Input_MouseClicked())\n    {\n        CP_Settings_AntiAlias(TRUE);\n    }\n    // Turn anti-aliasing off when the mouse is double-clicked\n    if (CP_Input_MouseDoubleClicked())\n    {\n        CP_Settings_AntiAlias(FALSE);\n    }\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_7","title":"Related","text":"<ul> <li>CP_Input_MouseClicked</li> <li>CP_Input_MouseDoubleClicked</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_linecapmode","title":"CP_Settings_LineCapMode","text":"<p>Sets the way the end of lines will be drawn. Check CP_LINE_CAP_MODE for options on which modes you can set. Defaults to CP_LINE_CAP_BUTT.</p>"},{"location":"documentation/Settings.html#function_8","title":"Function","text":"<pre><code>void CP_Settings_LineCapMode(CP_LINE_CAP_MODE capMode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_8","title":"Parameters","text":"<ul> <li>capMode (CP_LINE_CAP_MODE) - The mode to use for drawing the end of lines.</li> </ul>"},{"location":"documentation/Settings.html#return_8","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_8","title":"Example","text":"<pre><code>void update()\n{\n    if (CP_Input_KeyTriggered(KEY_1))\n    {\n        CP_Settings_LineCapMode(CP_LINE_CAP_BUTT);\n    }\n    else if (CP_Input_KeyTriggered(KEY_2))\n    {\n        CP_Settings_LineCapMode(CP_LINE_CAP_ROUND);\n    }\n    else if (CP_Input_KeyTriggered(KEY_3))\n    {\n        CP_Settings_LineCapMode(CP_LINE_CAP_SQUARE);\n    }\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_8","title":"Related","text":"<ul> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_linejointmode","title":"CP_Settings_LineJointMode","text":"<p>Sets the sharpness of corners when drawing shapes. Check CP_LINE_JOINT_MODE for options on which modes you can set. Defaults to CP_LINE_JOINT_BEVEL.</p>"},{"location":"documentation/Settings.html#function_9","title":"Function","text":"<pre><code>void CP_Settings_LineJointMode(CP_LINE_JOINT_MODE jointMode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_9","title":"Parameters","text":"<ul> <li>jointMode (CP_LINE_JOINT_MODE) - The mode to use for drawing corners.</li> </ul>"},{"location":"documentation/Settings.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    if (CP_Input_KeyTriggered(KEY_1))\n    {\n        CP_Settings_LineJointMode(CP_LINE_JOINT_ROUND);\n    }\n    else if (CP_Input_KeyTriggered(KEY_2))\n    {\n        CP_Settings_LineJointMode(CP_LINE_JOINT_BEVEL);\n    }\n    else if (CP_Input_KeyTriggered(KEY_3))\n    {\n        CP_Settings_LineJointMode(CP_LINE_JOINT_MITER);\n    }\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_9","title":"Related","text":"<ul> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_rectmode","title":"CP_Settings_RectMode","text":"<p>Lets you set the way rectangles will be drawn. Check CP_POSITION_MODE for options on which modes you can set. Defaults to CP_POSITION_CORNER.</p>"},{"location":"documentation/Settings.html#function_10","title":"Function","text":"<pre><code>void CP_Settings_RectMode(CP_POSITION_MODE mode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_10","title":"Parameters","text":"<p>mode (CP_POSITION_MODE) - The mode to use for where rectangles are drawn.</p>"},{"location":"documentation/Settings.html#return_9","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_10","title":"Example","text":"<pre><code>void update()\n{\n    // set the background color to gray\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // set the rectangle drawing mode to CENTER\n    CP_Settings_RectMode(CP_POSITION_CENTER);\n\n    // draw a rectangle at the center of the screen, half the size of the screen\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f,\n                         CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_10","title":"Related","text":"<ul> <li>CP_POSITION_MODE</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_ellipsemode","title":"CP_Settings_EllipseMode","text":"<p>Lets you set the way ellipses and circles will be drawn. Check CP_POSITION_MODE for options on which modes you can set. Defaults to CP_POSITION_CENTER.</p>"},{"location":"documentation/Settings.html#function_11","title":"Function","text":"<pre><code>void CP_Settings_EllipseMode(CP_POSITION_MODE mode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_11","title":"Parameters","text":"<p>mode (CP_POSITION_MODE) - The mode to use for where elipses are drawn.</p>"},{"location":"documentation/Settings.html#return_10","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_11","title":"Example","text":"<pre><code>void update()\n{\n    // set the background color to gray\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // set the rectangle drawing mode to CENTER\n    CP_Settings_EllipseMode(CP_POSITION_CENTER);\n\n    // draw a rectangle at the center of the screen, half the size of the screen\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f,\n                         CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_11","title":"Related","text":"<ul> <li>CP_POSITION_MODE</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_imagemode","title":"CP_Settings_ImageMode","text":"<p>Sets the mode to draw an image (similar to a rectangle) with a CP_POSITION_MODE. Defaults to CP_POSITION_CENTER.</p>"},{"location":"documentation/Settings.html#function_12","title":"Function","text":"<pre><code>void CP_Settings_ImageMode(CP_POSITION_MODE mode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_12","title":"Parameters","text":"<p>mode (CP_POSITION_MODE) - The mode to use when drawing images.</p>"},{"location":"documentation/Settings.html#return_11","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_12","title":"Example","text":"<pre><code>CP_Image justin_face;\n\nvoid init()\n{\n    justin_face = CP_Image_Load(\"Assets/justin1.png\");\n    CP_Settings_ImageMode(CP_POSITION_CORNER);\n}\n\nfloat rotation = 0;\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n    CP_Image_DrawAdvanced(justin_face, CP_Input_GetMouseX(), CP_Input_GetMouseY(), 100, 150, 255, rotation);\n    rotation++;\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_12","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Image_Load</li> <li>CP_Image_DrawAdvanced</li> <li>CP_Input_GetMouseX</li> <li>CP_Input_GetMouseY</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_blendmode","title":"CP_Settings_BlendMode","text":"<p>Set the blend mode for subsequent draw calls. See CP_BLEND_MODE for the different blend modes you can set and use.</p>"},{"location":"documentation/Settings.html#function_13","title":"Function","text":"<pre><code>void CP_Settings_BlendMode(CP_BLEND_MODE blendMode);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_13","title":"Parameters","text":"<ul> <li>blendMode (CP_BLEND_MODE) - The new blend mode to set the program to.</li> </ul>"},{"location":"documentation/Settings.html#return_12","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_13","title":"Example","text":"<pre><code>void update()\n{\n    // Toggle between two blend modes\n    if (CP_Input_KeyTriggered(KEY_1))\n        CP_Settings_BlendMode(CP_BLEND_MULTIPLY);\n    else if (CP_Input_KeyTriggered(KEY_2))\n        CP_Settings_BlendMode(CP_BLEND_ALPHA);\n\n    // Set the background color\n    CP_Graphics_ClearBackground(CP_Color_Create(245, 240, 176, 255));\n\n    // Draw a green circle\n    CP_Settings_Fill(CP_Color_Create(102, 186, 125, 255));\n    CP_Graphics_DrawCircle(100, 200, 150);\n\n    // Draw an overlapping blue circle\n    CP_Settings_Fill(CP_Color_Create(100, 150, 237, 255));\n    CP_Graphics_DrawCircle(200, 200, 150);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_13","title":"Related","text":"<ul> <li>CP_Input_KeyTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawCircle</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_imagefiltermode","title":"CP_Settings_ImageFilterMode","text":"<p>Sets the type of math to be used when doing anti-aliasing. See CP_IMAGE_FILTER_MODE for the different modes you can set and use.</p>"},{"location":"documentation/Settings.html#function_14","title":"Function","text":"<pre><code>void CP_Settings_ImageFilterMode(CP_IMAGE_FILTER_MODE filterMode);\n</code></pre>"},{"location":"documentation/Settings.html#paramters","title":"Paramters","text":"<ul> <li>filterMode (CP_IMAGE_FILTER_MODE) - The mode to use when anti-aliasing.</li> </ul>"},{"location":"documentation/Settings.html#return_13","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_14","title":"Example","text":"<pre><code>void update()\n{\n    // Toggle between modes\n    if (CP_Input_KeyTriggered(KEY_1))\n        CP_Settings_ImageFilterMode(CP_IMAGE_FILTER_NEAREST);\n    else if (CP_Input_KeyTriggered(KEY_2))\n        CP_Settings_ImageFilterMode(CP_IMAGE_FILTER_LINEAR);\n\n    // Set the background color\n    CP_Graphics_ClearBackground(CP_Color_Create(245, 240, 176, 255));\n\n    // Draw a green circle\n    CP_Settings_Fill(CP_Color_Create(102, 186, 125, 255));\n    CP_Graphics_DrawCircle(100, 100, 150);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_14","title":"Related","text":"<ul> <li>CP_Input_KeyTriggered</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawCircle</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_imagewrapmode","title":"CP_Settings_ImageWrapMode","text":"<p>Sets the behavior for what happens when a texture is sampled outside its bounds. See CP_IMAGE_WRAP_MODE for the different modes you can set and use. Defaults to CP_IMAGE_WRAP_CLAMP.</p>"},{"location":"documentation/Settings.html#function_15","title":"Function","text":"<pre><code>void CP_Settings_ImageWrapMode(CP_IMAGE_WRAP_MODE wrapMode);\n</code></pre>"},{"location":"documentation/Settings.html#paramters_1","title":"Paramters","text":"<ul> <li>wrapMode (CP_IMAGE_WRAP_MODE) - The mode to use for texture wrapping.</li> </ul>"},{"location":"documentation/Settings.html#return_14","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_15","title":"Example","text":"<pre><code>CP_Image image;\nint imageWidth;\nint imageHeight;\nfloat halfWidth;\nfloat halfHeight;\n\nvoid init()\n{\n    image = CP_Image_Load(\"Assets/Sunflower.png\");\n    imageWidth = CP_Image_GetWidth(image);\n    imageHeight = CP_Image_GetHeight(image);\n    halfHeight = imageHeight * 0.5f;\n    halfWidth = imageWidth * 0.5f;\n}\n\nvoid update()\n{\n    CP_Graphics_ClearBackground(CP_Color_Create(100, 200, 250, 150));\n\n    // Draw the image at (150, 150), 300 wide by 80 tall, and sample the texture\n    // starting at the center of the image (half the width and half the height from the top left corner)\n    // and ending half the width past the right edge and half the height past the bottom edge.\n    // By default this will display the bottom right quarter of the image.\n    CP_Image_DrawSubImage(image, 150, 150, 300, 80, halfWidth, halfHeight, imageWidth + halfWidth, imageHeight + halfHeight, 255);\n\n    // Toggle between different modes with the number keys\n    if (CP_Input_KeyTriggered(KEY_1))\n        CP_Settings_ImageWrapMode(CP_IMAGE_WRAP_CLAMP);\n    else if (CP_Input_KeyTriggered(KEY_2))\n        CP_Settings_ImageWrapMode(CP_IMAGE_WRAP_CLAMP_EDGE);\n    else if (CP_Input_KeyTriggered(KEY_3))\n        CP_Settings_ImageWrapMode(CP_IMAGE_WRAP_REPEAT);\n    else if (CP_Input_KeyTriggered(KEY_4))\n        CP_Settings_ImageWrapMode(CP_IMAGE_WRAP_MIRROR);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_15","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_textsize","title":"CP_Settings_TextSize","text":"<p>Sets the size of text displayed using CP_Font_DrawText.</p>"},{"location":"documentation/Settings.html#function_16","title":"Function","text":"<pre><code>void CP_Settings_TextSize(float size);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_14","title":"Parameters","text":"<ul> <li>size (float) - The size to draw the text at.</li> </ul>"},{"location":"documentation/Settings.html#return_15","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_16","title":"Example","text":"<pre><code>float textSize;\n\nvoid init()\n{\n    textSize = 20.0f;\n    CP_Settings_TextSize(textSize);\n}\n\nvoid update()\n{\n    // Clear the screen\n    CP_Graphics_ClearBackground(CP_Color_Create(100, 200, 250, 150));\n    // Display some text at (100, 100)\n    CP_Font_DrawText(\"Testing\", 100, 100);\n\n    // Increase and decrease the size of the text using the arrow keys\n    if (CP_Input_KeyTriggered(KEY_UP))\n    {\n        textSize += 5.0f;\n        CP_Settings_TextSize(textSize);\n    }\n    else if (CP_Input_KeyTriggered(KEY_DOWN))\n    {\n        textSize -= 5.0f;\n        CP_Settings_TextSize(textSize);\n    }\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_16","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Font_DrawText</li> <li>CP_Color_Create</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_textalignment","title":"CP_Settings_TextAlignment","text":"<p>Sets the alignment for all text draw calls after this function is called. See CP_TEXT_ALIGN_HORIZONTAL and CP_TEXT_ALIGN_VERTICAL for the available settings. The horizontal setting defaults to CP_TEXT_ALIGN_H_LEFT and the vertical setting defaults to CP_TEXT_ALIGN_V_BASELINE.</p>"},{"location":"documentation/Settings.html#function_17","title":"Function","text":"<pre><code>void CP_Settings_TextAlignment(CP_TEXT_ALIGN_HORIZONTAL h, CP_TEXT_ALIGN_VERTICAL v);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_15","title":"Parameters","text":"<ul> <li>h (CP_TEXT_ALIGN_HORIZONTAL) - The horizontal alignment setting.</li> <li>v (CP_TEXT_ALIGN_VERTICAL) - The vertical alignment setting.</li> </ul>"},{"location":"documentation/Settings.html#return_16","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_17","title":"Example","text":"<pre><code>CP_TEXT_ALIGN_HORIZONTAL horizontal = CP_TEXT_ALIGN_H_LEFT;\nCP_TEXT_ALIGN_VERTICAL vertical = CP_TEXT_ALIGN_V_BASELINE;\n\nvoid update()\n{\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(100, 200, 250, 150));\n\n    // Draw lines that cross at (100, 100)\n    CP_Settings_Stroke(CP_Color_Create(70, 93, 130, 255));\n    CP_Settings_StrokeWeight(1.0f);\n    CP_Graphics_DrawLine(0, 100, (float)CP_System_GetDisplayWidth(), 100);\n    CP_Graphics_DrawLine(100, 0, 100, (float)CP_System_GetDisplayHeight());\n\n    // Draw some text at (100, 100)\n    CP_Settings_Fill(CP_Color_Create(0, 0, 0, 255));\n    CP_Font_DrawText(\"Testing\", 100, 100);\n\n    // Toggle between the horizontal alignment settings with A B C\n    if (CP_Input_KeyTriggered(KEY_A))\n        horizontal = CP_TEXT_ALIGN_H_LEFT;\n    else if (CP_Input_KeyTriggered(KEY_B))\n        horizontal = CP_TEXT_ALIGN_H_CENTER;\n    else if (CP_Input_KeyTriggered(KEY_C))\n        horizontal = CP_TEXT_ALIGN_H_RIGHT;\n\n    // Toggle between the vertical alignment settings with 1 2 3 4\n    if (CP_Input_KeyTriggered(KEY_1))\n        vertical = CP_TEXT_ALIGN_V_TOP;\n    else if (CP_Input_KeyTriggered(KEY_2))\n        vertical = CP_TEXT_ALIGN_V_MIDDLE;\n    else if (CP_Input_KeyTriggered(KEY_3))\n        vertical = CP_TEXT_ALIGN_V_BOTTOM;\n    else if (CP_Input_KeyTriggered(KEY_4))\n        vertical = CP_TEXT_ALIGN_V_BASELINE;\n\n    CP_Settings_TextAlignment(horizontal, vertical);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_17","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_Stroke</li> <li>CP_Settings_StrokeWeight</li> <li>CP_Graphics_DrawLine</li> <li>CP_System_GetDisplayWidth</li> <li>CP_System_GetDisplayHeight</li> <li>CP_Settings_Fill</li> <li>CP_Font_DrawText</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_scale","title":"CP_Settings_Scale","text":"<p>This function changes the scale of the canvas by the provided scalars. You can change the X and Y scale separately. Note: The scale values must be non-zero and positive, and this function must be called every frame before you draw to the screen.</p>"},{"location":"documentation/Settings.html#function_18","title":"Function","text":"<pre><code>void CP_Settings_Scale(float xScale, float yScale);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_16","title":"Parameters","text":"<ul> <li>xScale (float) - The value to scale the canvas by horizontally.</li> <li>yScale (float) - The value to scale the canvas by vertically.</li> </ul>"},{"location":"documentation/Settings.html#return_17","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_18","title":"Example","text":"<pre><code>float scale = 1.0f;\n\nvoid update()\n{\n    // Get the change in the mouse wheel\n    float wheel = CP_Input_MouseWheel();\n    // If the wheel was moved up, increase the scale value\n    if (wheel &gt; 0)\n        scale += 0.05f;\n    // If it was moved down, reduce the scale value\n    else if (wheel &lt; 0)\n        scale -= 0.05f;\n\n    // Make sure the scale value isn't negative or zero\n    if (scale &lt; 0.01f)\n        scale = 0.01f;\n\n    // Set the scale\n    CP_Settings_Scale(scale, scale);\n\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(53, 84, 52, 150));\n    // Draw a rectangle\n    CP_Graphics_DrawRect(100, 100, 150, 100);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_18","title":"Related","text":"<ul> <li>CP_Input_MouseWheel</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_rotate","title":"CP_Settings_Rotate","text":"<p>Rotates the whole canvas around the upper left corner of the window by the input degrees. Note: This function must be called every frame before you draw to the screen.</p>"},{"location":"documentation/Settings.html#function_19","title":"Function","text":"<pre><code>void CP_Settings_Rotate(float degrees);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_17","title":"Parameters","text":"<ul> <li>degrees (float) - The number of degrees to rotate the canvas by.</li> </ul>"},{"location":"documentation/Settings.html#return_18","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_19","title":"Example","text":"<pre><code>float degrees = 0.0f;\n\nvoid update()\n{\n    // Get the change in the mouse wheel\n    float wheel = CP_Input_MouseWheel();\n    // If the wheel was moved up, increase the rotation degrees\n    if (wheel &gt; 0)\n        degrees += 3.0f;\n    // If it was moved down, reduce the rotation degrees\n    else if (wheel &lt; 0)\n        degrees -= 3.0f;\n\n    // Set the rotation\n    CP_Settings_Rotate(degrees);\n\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(66, 27, 64, 150));\n    // Draw a rectangle\n    CP_Graphics_DrawRect(100, 100, 150, 100);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_19","title":"Related","text":"<ul> <li>CP_Input_MouseWheel</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_translate","title":"CP_Settings_Translate","text":"<p>This function moves the canvas from its current center by the provided X and Y values. Note: This function must be called every frame before you draw to the screen.</p>"},{"location":"documentation/Settings.html#function_20","title":"Function","text":"<pre><code>void CP_Settings_Translate(float x, float y);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_18","title":"Parameters","text":"<ul> <li>x (float) - The distance to move the canvas in the horizontal direction.</li> <li>y (float) - The distance to move the canvas in the vertical direction.</li> </ul>"},{"location":"documentation/Settings.html#return_19","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_20","title":"Example","text":"<pre><code>float xTx = 0.0f;\nfloat yTx = 0.0f;\n\nvoid update()\n{\n    // Change the translation values with the arrow keys\n    if (CP_Input_KeyDown(KEY_UP))\n        yTx -= 5.0f;\n    else if (CP_Input_KeyDown(KEY_DOWN))\n        yTx += 5.0f;\n    if (CP_Input_KeyDown(KEY_LEFT))\n        xTx -= 5.0f;\n    else if (CP_Input_KeyDown(KEY_RIGHT))\n        xTx += 5.0f;\n\n    // Apply the translation values to the canvas\n    CP_Settings_Translate(xTx, yTx);\n\n    CP_Graphics_ClearBackground(CP_Color_Create(99, 51, 68, 150));\n    CP_Graphics_DrawRect(100, 100, 150, 100);\n    CP_Graphics_DrawCircle(180, 220, 100);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_20","title":"Related","text":"<ul> <li>CP_Input_KeyDown</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_applymatrix","title":"CP_Settings_ApplyMatrix","text":"<p>Multiplies the current camera transform matrix with the an input matrix.</p>"},{"location":"documentation/Settings.html#function_21","title":"Function","text":"<pre><code>void CP_Settings_ApplyMatrix(CP_Matrix m);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_19","title":"Parameters","text":"<ul> <li>m (CP_Matrix) - The matrix to apply to the camera transform.</li> </ul>"},{"location":"documentation/Settings.html#return_20","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_21","title":"Example","text":"<pre><code>void init()\n{\n    CP_Settings_RectMode(CP_POSITION_CENTER);\n    CP_Settings_NoStroke();\n}\n\nvoid update()\n{\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Reset the transform matrix\n    CP_Settings_ResetMatrix();\n\n    // The position of the rectangle we are drawing\n    CP_Vector position = CP_Vector_Set(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.5f);\n\n    // Create a transform matrix\n    CP_Matrix scale = CP_Matrix_Scale(CP_Vector_Set(150, 100));\n    CP_Matrix translate = CP_Matrix_Translate(position);\n    CP_Matrix rotate = CP_Matrix_Rotate(45.0f);\n\n    // Combine transform (translate * rotation * scale)\n    CP_Matrix transform = CP_Matrix_Multiply(translate, CP_Matrix_Multiply(rotate, scale));\n\n    // Set the camera transform to the created matrix\n    CP_Settings_ApplyMatrix(transform);\n\n    // Draw a blue rectangle that has been transformed\n    CP_Settings_Fill(CP_Color_Create(0, 0, 255, 255));\n    CP_Graphics_DrawRect(0, 0, 1, 1);\n\n    // Reset the transform matrix to the identity matrix\n    CP_Settings_ResetMatrix();\n\n    // Draw a red box in the center of the screen\n    CP_Settings_Fill(CP_Color_Create(255, 0, 0, 255));\n    CP_Graphics_DrawRect(position.x, position.y, 50, 50);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_21","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_ResetMatrix</li> <li>CP_Vector</li> <li>CP_Vector_Set</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> <li>CP_Matrix_Scale</li> <li>CP_Matrix_Translate</li> <li>CP_Matrix_Rotate</li> <li>CP_Matrix_Multiply</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_resetmatrix","title":"CP_Settings_ResetMatrix","text":"<p>Resets the camera transform matrix back to the identity matrix.</p>"},{"location":"documentation/Settings.html#function_22","title":"Function","text":"<pre><code>void CP_Settings_ResetMatrix(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_20","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_21","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_22","title":"Example","text":"<pre><code>void init()\n{\n    CP_Settings_RectMode(CP_POSITION_CENTER);\n    CP_Settings_NoStroke();\n}\n\nvoid update()\n{\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Reset the transform matrix\n    CP_Settings_ResetMatrix();\n\n    // The position of the rectangle we are drawing\n    CP_Vector position = CP_Vector_Set(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.5f);\n\n    // Create a transform matrix\n    CP_Matrix scale = CP_Matrix_Scale(CP_Vector_Set(150, 100));\n    CP_Matrix translate = CP_Matrix_Translate(position);\n    CP_Matrix rotate = CP_Matrix_Rotate(45.0f);\n\n    // Combine transform (translate * rotation * scale)\n    CP_Matrix transform = CP_Matrix_Multiply(translate, CP_Matrix_Multiply(rotate, scale));\n\n    // Set the camera transform to the created matrix\n    CP_Settings_ApplyMatrix(transform);\n\n    // Draw a blue rectangle that has been transformed\n    CP_Settings_Fill(CP_Color_Create(0, 0, 255, 255));\n    CP_Graphics_DrawRect(0, 0, 1, 1);\n\n    // Reset the transform matrix to the identity matrix\n    CP_Settings_ResetMatrix();\n\n    // Draw a red box in the center of the screen\n    CP_Settings_Fill(CP_Color_Create(255, 0, 0, 255));\n    CP_Graphics_DrawRect(position.x, position.y, 50, 50);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_22","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Vector</li> <li>CP_Vector_Set</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> <li>CP_Matrix_Scale</li> <li>CP_Matrix_Translate</li> <li>CP_Matrix_Rotate</li> <li>CP_Matrix_Multiply</li> <li>CP_Settings_ApplyMatrix</li> <li>CP_Settings_Fill</li> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_save","title":"CP_Settings_Save","text":"<p>Saves the current settings state and adds it to a stack a save states. This includes settings such as transform, fill color, stroke color, and size changes. Can only have 32 save states on the stack at once.</p>"},{"location":"documentation/Settings.html#function_23","title":"Function","text":"<pre><code>void CP_Settings_Save(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_21","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_22","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_23","title":"Example","text":"<pre><code>void init()\n{\n    CP_Settings_RectMode(CP_POSITION_CENTER);\n}\n\nvoid update()\n{\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Draw a red square in the top left corner\n    CP_Settings_Fill(CP_Color_Create(255, 0, 0, 255));\n    CP_Settings_Stroke(CP_Color_Create(0, 0, 255, 255));\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.25f, CP_System_GetWindowHeight() * 0.20f, 100.0f, 100.0f);\n\n    // Save the settings of the first square\n    CP_Settings_Save();\n\n    // Draw a blue square in the top middle\n    CP_Settings_Fill(CP_Color_Create(0, 0, 255, 255));\n    CP_Settings_Stroke(CP_Color_Create(255, 0, 0, 255));\n    CP_Settings_StrokeWeight(5);\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.35f, 100.0f, 100.0f);\n\n    // Save the settings of the second square\n    CP_Settings_Save();\n\n    // Now draw a pink and green square on the right side of the screen\n    CP_Settings_Fill(CP_Color_Create(200, 0, 200, 255));\n    CP_Settings_Stroke(CP_Color_Create(0, 255, 0, 255));\n    CP_Settings_StrokeWeight(10);\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.75f, CP_System_GetWindowHeight() * 0.5f, 100.0f, 100.0f);\n\n    // Restore the blue settings and draw a blue square in the bottom middle\n    CP_Settings_Restore();\n\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.65f, 100.0f, 100.0f);\n\n    // Restore the red settings and draw a red square in the bottom left\n    CP_Settings_Restore();\n\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.25f, CP_System_GetWindowHeight() * 0.80f, 100.0f, 100.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_23","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Settings_Stroke</li> <li>CP_Graphics_DrawRect</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> <li>CP_Settings_StrokeWeight</li> <li>CP_Settings_Restore</li> </ul>"},{"location":"documentation/Settings.html#cp_settings_restore","title":"CP_Settings_Restore","text":"<p>Sets the draw settings back to the last time you called CP_Settings_Save. Removes that save state from the stack. Make sure not to call CP_Settings_Restore before calling CP_Settings_Save.</p>"},{"location":"documentation/Settings.html#function_24","title":"Function","text":"<pre><code>void CP_Settings_Restore(void);\n</code></pre>"},{"location":"documentation/Settings.html#parameters_22","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Settings.html#return_23","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Settings.html#example_24","title":"Example","text":"<pre><code>void init()\n{\n    CP_Settings_RectMode(CP_POSITION_CENTER);\n}\n\nvoid update()\n{\n    // Clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n\n    // Draw a red square in the top left corner\n    CP_Settings_Fill(CP_Color_Create(255, 0, 0, 255));\n    CP_Settings_Stroke(CP_Color_Create(0, 0, 255, 255));\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.25f, CP_System_GetWindowHeight() * 0.20f, 100.0f, 100.0f);\n\n    // Save the settings of the first square\n    CP_Settings_Save();\n\n    // Draw a blue square in the top middle\n    CP_Settings_Fill(CP_Color_Create(0, 0, 255, 255));\n    CP_Settings_Stroke(CP_Color_Create(255, 0, 0, 255));\n    CP_Settings_StrokeWeight(5);\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.35f, 100.0f, 100.0f);\n\n    // Save the settings of the second square\n    CP_Settings_Save();\n\n    // Now draw a pink and green square on the right side of the screen\n    CP_Settings_Fill(CP_Color_Create(200, 0, 200, 255));\n    CP_Settings_Stroke(CP_Color_Create(0, 255, 0, 255));\n    CP_Settings_StrokeWeight(10);\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.75f, CP_System_GetWindowHeight() * 0.5f, 100.0f, 100.0f);\n\n    // Restore the blue settings and draw a blue square in the bottom middle\n    CP_Settings_Restore();\n\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.5f, CP_System_GetWindowHeight() * 0.65f, 100.0f, 100.0f);\n\n    // Restore the red settings and draw a red square in the bottom left\n    CP_Settings_Restore();\n\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() * 0.25f, CP_System_GetWindowHeight() * 0.80f, 100.0f, 100.0f);\n}\n</code></pre>"},{"location":"documentation/Settings.html#related_24","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Settings_Stroke</li> <li>CP_Graphics_DrawRect</li> <li>CP_Settings_Save</li> <li>CP_System_GetWindowWidth</li> <li>CP_System_GetWindowHeight</li> <li>CP_Settings_StrokeWeight</li> </ul>"},{"location":"documentation/Sound.html","title":"Sound","text":"<p>This section contains all Sound functions.</p>"},{"location":"documentation/Sound.html#cp_sound_load","title":"CP_Sound_Load","text":"<p>Load a CP_Sound by inputting the file path of the sound file as a string (const char*).</p>"},{"location":"documentation/Sound.html#function","title":"Function","text":"<pre><code>CP_Sound CP_Sound_Load(const char* filepath);\n</code></pre>"},{"location":"documentation/Sound.html#parameters","title":"Parameters","text":"<ul> <li>filepath (const char*) - The path to the sound file that you want to load.</li> </ul>"},{"location":"documentation/Sound.html#return","title":"Return","text":"<ul> <li>CP_Sound - The loaded sound, returns a NULL CP_Sound if the sound could not be loaded.</li> </ul>"},{"location":"documentation/Sound.html#example","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid Init()\n{\n     mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid Update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n        CP_Sound_Play(mySound);\n}\n\nvoid Shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Play</li> <li>CP_Sound_Free</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_loadmusic","title":"CP_Sound_LoadMusic","text":"<p>Loads a CP_Sound from the given file path, and streams the audio from disk while it is playing instead of loading the entire file into memory.</p>"},{"location":"documentation/Sound.html#function_1","title":"Function","text":"<pre><code>CP_Sound CP_Sound_LoadMusic(const char* filepath);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_1","title":"Parameters","text":"<ul> <li>filepath (const char*) - The filepath to the music you want to load.</li> </ul>"},{"location":"documentation/Sound.html#return_1","title":"Return","text":"<ul> <li>CP_Sound - The music loaded from the given filepath, returns NULL if no music could be loaded.</li> </ul>"},{"location":"documentation/Sound.html#example_1","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    myMusic = CP_Sound_LoadMusic(\"Assets/Justins_Dance_Song.wav\");\n}\n\nvoid update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n        CP_Sound_PlayMusic(myMusic);\n}\n\nvoid shutdown()\n{\n     CP_Sound_Free(myMusic);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_1","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayMusic</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_free","title":"CP_Sound_Free","text":"<p>Frees a given CP_Sound from memory. The CP_Sound will not be valid after this call.</p>"},{"location":"documentation/Sound.html#function_2","title":"Function","text":"<pre><code>void CP_Sound_Free(CP_Sound* sound);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_2","title":"Parameters","text":"<ul> <li>sound (CP_Sound) - The sound you want to free.</li> </ul>"},{"location":"documentation/Sound.html#return_2","title":"Return","text":"<p>This function does not return anything</p>"},{"location":"documentation/Sound.html#example_2","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_2","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_Play</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_play","title":"CP_Sound_Play","text":"<p>Plays a given CP_Sound once in the CP_SOUND_GROUP_SFX sound group.</p>"},{"location":"documentation/Sound.html#function_3","title":"Function","text":"<pre><code>void CP_Sound_Play(CP_Sound sound);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_3","title":"Parameters","text":"<ul> <li>sound (CP_Sound) - The sound you want to play.</li> </ul>"},{"location":"documentation/Sound.html#return_3","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_3","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n        CP_Sound_Play(mySound);\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_3","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_playmusic","title":"CP_Sound_PlayMusic","text":"<p>Plays a given CP_Sound continuously in the CP_SOUND_GROUP_MUSIC sound group. The sound will loop until it is stopped.</p>"},{"location":"documentation/Sound.html#function_4","title":"Function","text":"<pre><code>void CP_Sound_PlayMusic(CP_Sound sound);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_4","title":"Parameters","text":"<ul> <li>sound (CP_Sound) - The sound you want to play as music.</li> </ul>"},{"location":"documentation/Sound.html#return_4","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_4","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    myMusic = CP_Sound_LoadMusic(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n        CP_Sound_PlayMusic(myMusic);\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(myMusic);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_4","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_LoadMusic</li> <li>CP_Sound_Free</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_playadvanced","title":"CP_Sound_PlayAdvanced","text":"<p>Plays a given CP_Sound with provided values for the sound's volume and pitch, whether the sound will loop, and the sound group to play it in.</p>"},{"location":"documentation/Sound.html#function_5","title":"Function","text":"<pre><code>void CP_Sound_PlayAdvanced(CP_Sound sound, float volume, float pitch, CP_BOOL looping, CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_5","title":"Parameters","text":"<ul> <li>sound (CP_Sound) - The sound that you want to play.</li> <li>volume (float) - The volume modifier that you want to apply (1.0f = no modification, 0.0 = silent).</li> <li>pitch (float) - The pitch modification that you want to apply (1.0f = no modification, 0.5 = half pitch, 2.0 = double pitch).</li> <li>looping (P_BOOL) - If you want the sound to loop or not.</li> <li>group (CP_SOUND_GROUP_MUSIC) - The sound group that you want the sound played in.</li> </ul>"},{"location":"documentation/Sound.html#return_5","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_5","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    if (CP_Input_KeyTriggered(KEY_S))\n    {\n        // play a sound with double the pitch (1 octave up), looping, and put it in sound group 2\n        CP_Sound_PlayAdvanced(mySound, 1.0f, 2.0f, TRUE, CP_SOUND_GROUP_2);\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_5","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_pauseall","title":"CP_Sound_PauseAll","text":"<p>Pauses all CP_Sounds that are currently playing.</p>"},{"location":"documentation/Sound.html#function_6","title":"Function","text":"<pre><code>void CP_Sound_PauseAll();\n</code></pre>"},{"location":"documentation/Sound.html#parameters_6","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Sound.html#return_6","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_6","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    float songLength = 500;\n    static float timer = 0;\n\n    if(!timer)\n    {\n        CP_Sound_Play(mySound);\n    }\n\n    timer += CP_System_GetDt();\n\n    if(timer &gt;= .5f * songLength)\n    {\n        CP_Sound_PauseAll();\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_6","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_Play</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_pausegroup","title":"CP_Sound_PauseGroup","text":"<p>Pauses all CP_Sounds currently playing within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_7","title":"Function","text":"<pre><code>void CP_Sound_PauseGroup(CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_7","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want to pause.</li> </ul>"},{"location":"documentation/Sound.html#return_7","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_7","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 500;\n    static float timer = 0;\n\n    timer += 1;\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if (timer &gt;= .5f * songLength)\n    {\n        // this will pause mySound, but not mySecondSound, because mySecondSound is not in CP_SOUND_GROUP_3\n        CP_Sound_PauseGroup(CP_SOUND_GROUP_3);\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_7","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_resumeall","title":"CP_Sound_ResumeAll","text":"<p>Resumes all CP_Sounds that are currently paused.</p>"},{"location":"documentation/Sound.html#function_8","title":"Function","text":"<pre><code>void CP_Sound_ResumeAll(void);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_8","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Sound.html#return_8","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_8","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // this will pause mySound, but not mySecondSound, because mySecondSound is not in CP_SOUND_GROUP_3\n        CP_Sound_PauseGroup(CP_SOUND_GROUP_3);\n    }\n\n    if(time &gt;= songLength)\n    {\n        CP_Sound_ResumeAll();  // play any paused sounds\n        timer = 0;             // reset the timer so that the sound pauses 50% further in\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_8","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_Sound_PauseGroup</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_resumegroup","title":"CP_Sound_ResumeGroup","text":"<p>Resumes all CP_Sounds that are currently paused within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_9","title":"Function","text":"<pre><code>void CP_Sound_PauseGroup(CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_9","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want to resume playing.</li> </ul>"},{"location":"documentation/Sound.html#return_9","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_9","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // this will pause mySound, but not mySecondSound, because mySecondSound is not in CP_SOUND_GROUP_3\n        CP_Sound_PauseGroup(CP_SOUND_GROUP_3);\n    }\n\n    if(timer &gt;= songLength)\n    {\n        CP_Sound_ResumeGroup(CP_SOUND_GROUP_3);  // resume playing all sounds in group 3, currently only mySound\n        timer = 0;                               // reset timer so that group 3 pauses another 50% into the timer\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_9","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_Sound_ResumeGroup</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_stopall","title":"CP_Sound_StopAll","text":"<p>Stops all currently playing CP_Sounds in all CP_SOUND_GROUPS and resets them to their beginnings.</p>"},{"location":"documentation/Sound.html#function_10","title":"Function","text":"<pre><code>void CP_Sound_StopAll(void);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_10","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Sound.html#return_10","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_10","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_Play(mySound);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        CP_Sound_StopAll();     // stop playing mySound and reset it to it's beginning\n        CP_Sound_Play(mySound); // play mySound from its beginning\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_10","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_Play</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_stopgroup","title":"CP_Sound_StopGroup","text":"<p>Stops all CP_Sounds that are currently playing within a given group and resets them to their beginnings.</p>"},{"location":"documentation/Sound.html#function_11","title":"Function","text":"<pre><code>void CP_Sound_StopGroup(CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_11","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The group that you want to stop all sounds in.</li> </ul>"},{"location":"documentation/Sound.html#return_11","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_11","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_2); // play a looped, but unedited, mySound in group 2\n\n    if(timer &gt;= .5f * songLength)\n    {\n        CP_Sound_StopGroup(CP_SOUND_GROUP_2);                         // stop playing mySound and reset it to it's beginning\n        CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_2); // play mySound from its beginning in group 2\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_11","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_setgroupvolume","title":"CP_Sound_SetGroupVolume","text":"<p>Sets the volume of all CP_Sounds within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_12","title":"Function","text":"<pre><code>void CP_Sound_SetGroupVolume(CP_SOUND_GROUP group, float volume)\n</code></pre>"},{"location":"documentation/Sound.html#parameters_12","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want to set the volume for.</li> <li>volume (float) - The volume modifier you want to apply to the group (1.0f is normal volume, 0.0 is silent).</li> </ul>"},{"location":"documentation/Sound.html#return_12","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/Sound.html#example_12","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // make all sounds in group 3 (currently only mySound) half their original volume\n        CP_Sound_SetGroupVolume(CP_SOUND_GROUP_3, .5);\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_12","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_getgroupvolume","title":"CP_Sound_GetGroupVolume","text":"<p>Gets the volume modifier of all CP_Sounds within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_13","title":"Function","text":"<pre><code>float CP_Sound_GetGroupVolume(CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_13","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want the volume modifier of.</li> </ul>"},{"location":"documentation/Sound.html#return_13","title":"Return","text":"<ul> <li>float - The current volume modifier applied to all sounds within the given group.</li> </ul>"},{"location":"documentation/Sound.html#example_13","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // set the volume modifier of group 3 to .5\n        CP_Sound_SetGroupVolume(CP_SOUND_GROUP_3, .5f);\n\n        // get the modifier of group 3, on the currently .5\n        float volume = CP_Sound_GetGroupVolume(CP_SOUND_GROUP_3);\n        timer = 0;\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_13","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_Sound_SetGroupPitch</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_setgrouppitch","title":"CP_Sound_SetGroupPitch","text":"<p>Sets the pitch modifier of all CP_Sounds within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_14","title":"Function","text":"<pre><code>void CP_Sound_SetGroupPitch(CP_SOUND_GROUP group, float pitch);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_14","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want to modify the pitch of.</li> <li>pitch (float) - The pitch modifier that you want to give to all sounds in the given group (1.0 is normal pitch, 0.5 is half pitch, 2.0 is double pitch).</li> </ul>"},{"location":"documentation/Sound.html#return_14","title":"Return","text":"<p>This function does not return anything</p>"},{"location":"documentation/Sound.html#example_14","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // set the pitch modifier of group 3 to 2\n        CP_Sound_SetGroupPitch(CP_SOUND_GROUP_3, 2);\n\n        // get the pitch modifier of group 3, currently 2.0f\n        float pitch = CP_Sound_GetGroupPitch(CP_SOUND_GROUP_3);\n        timer = 0;\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_14","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_Sound_SetGroupPitch</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/Sound.html#cp_sound_getgrouppitch","title":"CP_Sound_GetGroupPitch","text":"<p>Gets the pitch modifier applied to all CP_Sounds within the given CP_SOUND_GROUP.</p>"},{"location":"documentation/Sound.html#function_15","title":"Function","text":"<pre><code>float CP_Sound_GetGroupPitch(CP_SOUND_GROUP group);\n</code></pre>"},{"location":"documentation/Sound.html#parameters_15","title":"Parameters","text":"<ul> <li>group (CP_SOUND_GROUP) - The sound group that you want to get the pitch of.</li> </ul>"},{"location":"documentation/Sound.html#return_15","title":"Return","text":"<ul> <li>float - The current pitch modifier of the specified CP_SOUND_GROUP.</li> </ul>"},{"location":"documentation/Sound.html#example_15","title":"Example","text":"<pre><code>CP_Sound mySound = NULL;\nCP_Sound mySecondSound = NULL;\n\nvoid init()\n{\n    mySound = CP_Sound_Load(\"Assets/Justins_voice.wav\");\n    mySecondSound = CP_Sound_Load(\"Assets/Justins_laugh.wav\");\n}\n\nvoid update()\n{\n    float songLength = 5;\n    static float timer = 0;\n\n    timer += CP_System_GetDt();\n\n    CP_Sound_PlayAdvanced(mySound, 1, 1, TRUE, CP_SOUND_GROUP_3);\n    CP_Sound_PlayAdvanced(mySecondSound, 1, 1, TRUE, CP_SOUND_GROUP_5);\n\n    if(timer &gt;= .5f * songLength)\n    {\n        // set the pitch modifier of group 3 to 2\n        CP_Sound_SetGroupPitch(CP_SOUND_GROUP_3, 2);\n\n        // get the pitch modifier of group 3, on the currently 2.0f\n        float pitch = CP_Sound_GetGroupPitch(CP_SOUND_GROUP_3);\n        timer = 0;\n    }\n}\n\nvoid shutdown()\n{\n    CP_Sound_Free(mySound);\n    CP_Sound_Free(mySecondSound);\n}\n</code></pre>"},{"location":"documentation/Sound.html#related_15","title":"Related","text":"<ul> <li>CP_Sound</li> <li>CP_Sound_Load</li> <li>CP_Sound_Free</li> <li>CP_Sound_PlayAdvanced</li> <li>CP_Sound_SetGroupPitch</li> <li>CP_System_GetDt</li> </ul>"},{"location":"documentation/System.html","title":"System","text":"<p>This section contains all System functions.</p>"},{"location":"documentation/System.html#cp_system_setwindowsize","title":"CP_System_SetWindowSize","text":"<p>This function modifies the size of the window. Typically, the window size is set in the init function.</p>"},{"location":"documentation/System.html#function","title":"Function","text":"<pre><code>void CP_System_SetWindowSize(int new_width, int new_height);\n</code></pre>"},{"location":"documentation/System.html#parameters","title":"Parameters","text":"<ul> <li>new_width (int) - The width to set the window to.</li> <li>new_height (int) - The height to set the window to.</li> </ul>"},{"location":"documentation/System.html#return","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example","title":"Example","text":"<pre><code>void init()\n{\n    // Set the window size to a small square\n    CP_System_SetWindowSize(10, 10);\n\n    // Set the background to white\n    CP_Graphics_ClearBackground(CP_Color_Create(255, 255, 255, 255));\n}\n</code></pre>"},{"location":"documentation/System.html#related","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/System.html#cp_system_setwindowposition","title":"CP_System_SetWindowPosition","text":"<p>This function sets the position of the application window within the user's monitor screen. The top-left corner of the window will be set to the position provided. Note: The position (0, 0) is at the top left of the monitor screen.</p>"},{"location":"documentation/System.html#function_1","title":"Function","text":"<pre><code>void CP_System_SetWindowPosition(int x, int y);\n</code></pre>"},{"location":"documentation/System.html#parameters_1","title":"Parameters","text":"<ul> <li>x (int) - The X coordinate of the window's top-left corner.</li> <li>y (int) - The Y coordinate of the window's top-left corner.</li> </ul>"},{"location":"documentation/System.html#return_1","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_1","title":"Example","text":"<pre><code>void init()\n{\n    // Set the window position to be 100 pixels from the top of the screen\n    // and 200 pixels from the left edge of the screen\n    CP_System_SetWindowPosition(200, 100);\n}\n</code></pre>"},{"location":"documentation/System.html#related_1","title":"Related","text":""},{"location":"documentation/System.html#cp_system_fullscreen","title":"CP_System_Fullscreen","text":"<p>This function sets the window to fullscreen. It will automatically sets the window's pixel width and height to the monitor's width and height. Use CP_System_FullscreenAdvanced to specify a pixel width and height for the fullscreen window.</p>"},{"location":"documentation/System.html#function_2","title":"Function","text":"<pre><code>void CP_System_Fullscreen(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_2","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_2","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_2","title":"Example","text":"<pre><code>void init()\n{\n    // Set the window to fill the screen\n    CP_System_Fullscreen();\n\n    // Set the background to black\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n}\n</code></pre>"},{"location":"documentation/System.html#related_2","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/System.html#cp_system_fullscreenadvanced","title":"CP_System_FullscreenAdvanced","text":"<p>This function sets the window to fullscreen like CP_System_Fullscreen but lets you set the pixel aspect ratio of the screen as well. If you try to set the screen to an aspect ratio unsupported by the monitor, it will be set to the closest aspect ratio possible.</p>"},{"location":"documentation/System.html#function_3","title":"Function","text":"<pre><code>void CP_System_FullscreenAdvanced(int targetWidth, int targetHeight);\n</code></pre>"},{"location":"documentation/System.html#parameters_3","title":"Parameters","text":"<ul> <li>targetWidth (int) - The pixel width of the window.</li> <li>targetHeight (int) - The pixel height of the window.</li> </ul>"},{"location":"documentation/System.html#return_3","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_3","title":"Example","text":"<pre><code>// Horizontal position of the square\nfloat x_pos;\n\nvoid init()\n{\n    // Start the square at the left of the screen\n    x_pos = 0;\n\n    // Set the square to draw yellow\n    CP_Settings_Fill(CP_Color_Create(255, 255, 0, 255));\n\n    // Set the window to fullscreen 1280x720\n    CP_System_FullscreenAdvanced(1280, 720);\n}\n\nvoid update()\n{\n    // Set background to black\n    CP_Graphics_ClearBackground(CP_Color_Create(0, 0, 0, 255));\n\n    // Draw the square\n    CP_Graphics_DrawRect(x_pos, CP_System_GetWindowHeight() / 2.0f, 100, 100);\n    x_pos += 2;\n\n    // If space pressed, reset the state\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n        CP_Engine_SetNextGameStateForced(init, update, NULL);\n    else if (CP_Input_KeyTriggered(KEY_Q))\n        CP_Engine_Terminate();\n}\n</code></pre>"},{"location":"documentation/System.html#related_3","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> <li>CP_Settings_Fill</li> <li>CP_Engine_SetNextGameStateForced</li> <li>CP_Engine_Terminate</li> <li>CP_Input_KeyTriggered</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/System.html#cp_system_getwindowwidth","title":"CP_System_GetWindowWidth","text":"<p>Gets the display width of the window excluding the window frame. This is the width of the canvas you are drawing to.</p>"},{"location":"documentation/System.html#function_4","title":"Function","text":"<pre><code>int CP_System_GetWindowWidth(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_4","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_4","title":"Return","text":"<ul> <li>int - The width of the game window.</li> </ul>"},{"location":"documentation/System.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    // Clear the background to a blue color\n    CP_Graphics_ClearBackground(CP_Color_Create(20, 200, 255, 255));\n\n    // Draw a rectangle at the mouse position\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f, 25.0f, 25.0f);\n}\n</code></pre>"},{"location":"documentation/System.html#related_4","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowHeight</li> </ul>"},{"location":"documentation/System.html#cp_system_getwindowheight","title":"CP_System_GetWindowHeight","text":"<p>Gets the display height of the window excluding the window frame. This is the height of the canvas you are drawing to.</p>"},{"location":"documentation/System.html#function_5","title":"Function","text":"<pre><code>int CP_System_GetWindowHeight(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_5","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_5","title":"Return","text":"<ul> <li>int - The height of the game window.</li> </ul>"},{"location":"documentation/System.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    // Clear the background to a blue color\n    CP_Graphics_ClearBackground(CP_Color_Create(20, 200, 255, 255));\n\n    // Draw a rectangle at the mouse position\n    CP_Graphics_DrawRect(CP_System_GetWindowWidth() / 2.0f, CP_System_GetWindowHeight() / 2.0f, 25.0f, 25.0f);\n}\n</code></pre>"},{"location":"documentation/System.html#related_5","title":"Related","text":"<ul> <li>CP_Graphics_ClearBackground</li> <li>CP_Graphics_DrawRect</li> <li>CP_Color_Create</li> <li>CP_System_GetWindowWidth</li> </ul>"},{"location":"documentation/System.html#cp_system_getdisplaywidth","title":"CP_System_GetDisplayWidth","text":"<p>Gets the width of the user's monitor in pixels.</p>"},{"location":"documentation/System.html#function_6","title":"Function","text":"<pre><code>int CP_System_GetDisplayWidth(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_6","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_6","title":"Return","text":"<ul> <li>int - The width of the monitor.</li> </ul>"},{"location":"documentation/System.html#example_6","title":"Example","text":"<pre><code>void init()\n{\n    // Set the window size to the same size as the screen\n    CP_System_SetWindowSize(CP_System_GetDisplayWidth(), CP_System_GetDisplayHeight());\n}\n</code></pre>"},{"location":"documentation/System.html#related_6","title":"Related","text":"<ul> <li>CP_System_SetWindowSize</li> <li>CP_System_GetDisplayHeight</li> </ul>"},{"location":"documentation/System.html#cp_system_getdisplayheight","title":"CP_System_GetDisplayHeight","text":"<p>Gets the height of the user's monitor in pixels.</p>"},{"location":"documentation/System.html#function_7","title":"Function","text":"<pre><code>int CP_System_GetDisplayHeight(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_7","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_7","title":"Return","text":"<ul> <li>int - The height of the monitor.</li> </ul>"},{"location":"documentation/System.html#example_7","title":"Example","text":"<pre><code>void init()\n{\n    // Set the window size to the same size as the screen\n    CP_System_SetWindowSize(CP_System_GetDisplayWidth(), CP_System_GetDisplayHeight());\n}\n</code></pre>"},{"location":"documentation/System.html#related_7","title":"Related","text":"<ul> <li>CP_System_SetWindowSize</li> <li>CP_System_GetDisplayWidth</li> </ul>"},{"location":"documentation/System.html#cp_system_getdisplayrefreshrate","title":"CP_System_GetDisplayRefreshRate","text":"<p>Gets the refresh rate of the primary monitor.</p>"},{"location":"documentation/System.html#function_8","title":"Function","text":"<pre><code>int CP_System_GetDisplayRefreshRate(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_8","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_8","title":"Return","text":"<ul> <li>int - Returns the refresh rate of the primary monitor in hertz.</li> </ul>"},{"location":"documentation/System.html#example_8","title":"Example","text":"<pre><code>void init()\n{\n    // sets the application frame rate to be the same as the monitor refresh rate\n    int refresh_rate = CP_System_GetDisplayRefreshRate(void);\n    CP_System_SetFrameRate((float)refresh_rate);\n}\n</code></pre>"},{"location":"documentation/System.html#related_8","title":"Related","text":"<ul> <li>CP_System_SetFrameRate</li> </ul>"},{"location":"documentation/System.html#cp_system_getwindowhandle","title":"CP_System_GetWindowHandle","text":"<p>Returns the window handle (HWND) of the program running. See https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list for windows.h documentation and examples.</p>"},{"location":"documentation/System.html#function_9","title":"Function","text":"<pre><code>HWND CP_System_GetWindowHandle(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_9","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_9","title":"Return","text":"<ul> <li>HWND - Windows type that represents the handle to the window.</li> </ul>"},{"location":"documentation/System.html#cp_system_setwindowtitle","title":"CP_System_SetWindowTitle","text":"<p>Sets the title of the running program.</p>"},{"location":"documentation/System.html#function_10","title":"Function","text":"<pre><code>void CP_System_SetWindowTitle(const char* title);\n</code></pre>"},{"location":"documentation/System.html#parameters_10","title":"Parameters","text":"<ul> <li>title (const char*) - The string containing the title to change the title bar to.</li> </ul>"},{"location":"documentation/System.html#return_10","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    // Set the window title to the number of frames that have passed.\n    char buffer[256] = { 0 };\n    sprintf_s(buffer, 256, \"%d frames have passed\", frameCount);\n    CP_System_SetWindowTitle(buffer);\n}\n</code></pre>"},{"location":"documentation/System.html#cp_system_getwindowfocus","title":"CP_System_GetWindowFocus","text":"<p>Returns whether the application window has focus.</p>"},{"location":"documentation/System.html#function_11","title":"Function","text":"<pre><code>CP_BOOL CP_System_GetWindowFocus(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_11","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_11","title":"Return","text":"<p>This functions returns 1 if the window has focus and 0 otherwise.</p>"},{"location":"documentation/System.html#example_10","title":"Example","text":"<pre><code>void update()\n{\n    // checks if the window has focus.\n    // if it does not have focus, don't update.\n    if (!CP_System_GetWindowFocus())\n        return;\n\n    // otherwise, do update stuff here\n}\n</code></pre>"},{"location":"documentation/System.html#cp_system_showcursor","title":"CP_System_ShowCursor","text":"<p>This function sets whether the cursor is visible or not. Typically, it is used in the init function.</p>"},{"location":"documentation/System.html#function_12","title":"Function","text":"<pre><code>void CP_System_ShowCursor(CP_BOOL show);\n</code></pre>"},{"location":"documentation/System.html#parameters_12","title":"Parameters","text":"<ul> <li>show (CP_BOOL) - True/False for whether the cursor is visible.</li> </ul>"},{"location":"documentation/System.html#return_12","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_11","title":"Example","text":"<pre><code>CP_BOOL cursor = TRUE;\n\nvoid init()\n{\n    // Set the window to fullscreen\n    CP_System_Fullscreen();\n\n    // Show the cursor\n    CP_System_ShowCursor(cursor);\n}\n\nvoid update()\n{\n    // Check if the spacebar is triggered\n    if (CP_Input_KeyTriggered(KEY_SPACE))\n    {\n        // Swap whether the cursor is shown\n        cursor = !cursor;\n        CP_System_ShowCursor(cursor);\n    }\n}\n</code></pre>"},{"location":"documentation/System.html#related_9","title":"Related","text":"<ul> <li>CP_System_Fullscreen</li> <li>CP_Input_KeyTriggered</li> </ul>"},{"location":"documentation/System.html#cp_system_getframecount","title":"CP_System_GetFrameCount","text":"<p>Returns the current frame count. The frame count starts at 0 when the program launches and increments every frame until the program ends.</p> <p>Note: the frame count can't be set by the user and isn't reset when changing game states.</p>"},{"location":"documentation/System.html#function_13","title":"Function","text":"<pre><code>int CP_System_GetFrameCount();\n</code></pre>"},{"location":"documentation/System.html#parameters_13","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_13","title":"Return","text":"<ul> <li>int - The current frame count.</li> </ul>"},{"location":"documentation/System.html#example_12","title":"Example","text":"<pre><code>void update(void)\n{\n    // print the current frame count to the center of the window\n    CP_Settings_TextSize(200);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n\n    int currentFrameCount = CP_System_GetFrameCount();\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%i\", currentFrameCount);\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_10","title":"Related","text":"<ul> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Settings_Fill</li> <li>CP_Font_DrawText</li> </ul>"},{"location":"documentation/System.html#cp_system_getframerate","title":"CP_System_GetFrameRate","text":"<p>Returns the current frames per second.</p>"},{"location":"documentation/System.html#function_14","title":"Function","text":"<pre><code>float CP_System_GetFrameRate(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_14","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_14","title":"Return","text":"<ul> <li>float - The current number of frames per second.</li> </ul>"},{"location":"documentation/System.html#example_13","title":"Example","text":"<pre><code>void update(void)\n{\n    // print the current frame rate to the center of the window\n    CP_Settings_TextSize(200);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n\n    float currentFrameRate = CP_System_GetFrameRate();\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%.1f\", currentFrameRate );\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_11","title":"Related","text":"<ul> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Settings_Fill</li> <li>CP_Font_DrawText</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/System.html#cp_system_setframerate","title":"CP_System_SetFrameRate","text":"<p>Sets the target frame rate (fps) for the application.</p> <p>The internal frame rate controller manages when each update call happens. If the processing required to complete one update finishes quickly then the frame rate controller will idle the CPU. Once the total desired frame time has passed it will then start the next frame. If the processing required to complete one update takes longer than one frame's worth of time then the next frame will start immediately.</p>"},{"location":"documentation/System.html#function_15","title":"Function","text":"<pre><code>void CP_System_SetFrameRate(float fps)\n</code></pre>"},{"location":"documentation/System.html#parameters_15","title":"Parameters","text":"<ul> <li>fps - the target application update speed in frames per second.</li> </ul>"},{"location":"documentation/System.html#return_15","title":"Return","text":"<p>This function does not return anything.</p>"},{"location":"documentation/System.html#example_14","title":"Example","text":"<pre><code>void init(void)\n{\n    // set framerate to 2 fps (slow)\n    CP_System_SetFrameRate(2.0f);\n\n    // initialize settings\n    CP_Settings_TextSize(200);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n}\n\nvoid update(void)\n{\n    // clear the screen\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // print the current frame count to the center of the window\n    int currentFrameCount = CP_System_GetFrameCount();\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%i\", currentFrameCount);\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_12","title":"Related","text":"<ul> <li>CP_System_GetFrameCount</li> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Settings_Fill</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Font_DrawText</li> </ul>"},{"location":"documentation/System.html#cp_system_getdt","title":"CP_System_GetDt","text":"<p>Returns the elapsed time (in seconds) from the last frame. This is very important when making frame independent calculations such as movement or physics.</p>"},{"location":"documentation/System.html#function_16","title":"Function","text":"<pre><code>float CP_System_GetDt(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_16","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_16","title":"Return","text":"<ul> <li>float - The fraction of a second that has passed since the last frame.</li> </ul>"},{"location":"documentation/System.html#example_15","title":"Example","text":"<pre><code>void init(void)\n{\n    // initialize settings\n    CP_Settings_TextSize(150);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n}\n\nvoid update(void)\n{\n    // clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // get dt and then print total elapsed time\n    float currentElapsedTime = CP_System_GetDt();\n    static float totalElapsedTime = 0;\n    totalElapsedTime += currentElapsedTime;\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%.2f\", totalElapsedTime);\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_13","title":"Related","text":"<ul> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Settings_Fill</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Font_DrawText</li> </ul>"},{"location":"documentation/System.html#cp_system_getmillis","title":"CP_System_GetMillis","text":"<p>Returns the total milliseconds from the start of the program.</p> <p>NOTE: This number is always increasing and cannot be changed or reset by the user.</p>"},{"location":"documentation/System.html#function_17","title":"Function","text":"<pre><code>float CP_System_GetMillis(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_17","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_17","title":"Return","text":"<ul> <li>float - The milliseconds that have passed since the program started.</li> </ul>"},{"location":"documentation/System.html#example_16","title":"Example","text":"<pre><code>void init(void)\n{\n    // initialize settings\n    CP_Settings_TextSize(150);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n}\n\nvoid update(void)\n{\n    // clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // print milliseconds since program start\n    float totalMillis = CP_System_GetMillis();\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%.1f\", totalMillis);\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_14","title":"Related","text":"<ul> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Settings_Fill</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Font_DrawText</li> </ul>"},{"location":"documentation/System.html#cp_system_getseconds","title":"CP_System_GetSeconds","text":"<p>Returns the total number of seconds from the start of the program.</p> <p>NOTE: This number is always increasing and cannot be changed or reset by the user.</p>"},{"location":"documentation/System.html#function_18","title":"Function","text":"<pre><code>float CP_System_GetSeconds(void);\n</code></pre>"},{"location":"documentation/System.html#parameters_18","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/System.html#return_18","title":"Return","text":"<ul> <li>float - The number of seconds that have passed since the program started.</li> </ul>"},{"location":"documentation/System.html#example_17","title":"Example","text":"<pre><code>void init(void)\n{\n    // initialize settings\n    CP_Settings_TextSize(150);\n    CP_Settings_TextAlignment(CP_TEXT_ALIGN_H_CENTER, CP_TEXT_ALIGN_V_MIDDLE);\n    CP_Settings_Fill(CP_Color_Create(100, 20, 100, 255));\n}\n\nvoid update(void)\n{\n    // clear the background\n    CP_Graphics_ClearBackground(CP_Color_Create(200, 200, 200, 255));\n\n    // print seconds since program start\n    float totalSeconds = CP_System_GetSeconds();\n\n    char buffer[16] = { 0 };\n    sprintf_s(buffer, 16, \"%.2f\", totalSeconds);\n    CP_Font_DrawText(buffer, 200, 200);\n}\n</code></pre>"},{"location":"documentation/System.html#related_15","title":"Related","text":"<ul> <li>CP_Settings_TextSize</li> <li>CP_Settings_TextAlignment</li> <li>CP_Settings_Fill</li> <li>CP_Color_Create</li> <li>CP_Graphics_ClearBackground</li> <li>CP_Font_DrawText</li> </ul>"},{"location":"documentation/Types.html","title":"Types","text":"<p>This section contains all C_Processing types declared in cprocessing_common.h</p>"},{"location":"documentation/Types.html#cp_bool","title":"CP_BOOL","text":"<p>A TRUE (1) or FALSE (0) type.</p>"},{"location":"documentation/Types.html#cp_image","title":"CP_Image","text":"<p>A type used to store loaded images.</p>"},{"location":"documentation/Types.html#related","title":"Related","text":"<ul> <li>All Image Functions</li> <li>CP_Image_Load</li> <li>CP_Image_Draw</li> <li>CP_Image_Free</li> </ul>"},{"location":"documentation/Types.html#cp_sound","title":"CP_Sound","text":"<p>A type used to store loaded sounds.</p>"},{"location":"documentation/Types.html#related_1","title":"Related","text":"<ul> <li>All Sound Functions</li> <li>CP_Sound_Load</li> <li>CP_Sound_Play</li> <li>CP_Sound_Free</li> </ul>"},{"location":"documentation/Types.html#cp_font","title":"CP_Font","text":"<p>A type used to store loaded fonts.</p>"},{"location":"documentation/Types.html#related_2","title":"Related","text":"<ul> <li>All Font Functions</li> <li>CP_Font_Load</li> <li>CP_Font_Set</li> </ul>"},{"location":"documentation/Types.html#cp_color","title":"CP_Color","text":"<p>A type that stores red, green, blue, and alpha values of a color (RGBA). Each color is represented by a number between 0 and 255.</p>"},{"location":"documentation/Types.html#common-colors","title":"Common Colors","text":"<ul> <li>black - CP_Color_Create(0, 0, 0, 255)</li> <li>white - CP_Color_Create(255, 255, 255, 255)</li> <li>gray 50% - CP_Color_Create(128, 128, 128, 255)</li> <li>red - CP_Color_Create(255, 0, 0, 255)</li> <li>green - CP_Color_Create(0, 255, 0, 255)</li> <li>blue - CP_Color_Create(0, 0, 255, 255)</li> </ul>"},{"location":"documentation/Types.html#related_3","title":"Related","text":"<ul> <li>All Color Functions</li> <li>CP_ColorHSL</li> <li>CP_Color_Create</li> </ul>"},{"location":"documentation/Types.html#cp_colorhsl","title":"CP_ColorHSL","text":"<p>A type that stores the hue, saturation, light, and alpha of a color (HSLA). Hue has a range of 0 - 360, Saturation and Light have a range of 0 - 100, and Alpha has a range of 0 - 255.</p>"},{"location":"documentation/Types.html#related_4","title":"Related","text":"<ul> <li>All HSL Color Functions</li> <li>CP_ColorHSL_Create</li> </ul>"},{"location":"documentation/Types.html#cp_line_cap_mode","title":"CP_LINE_CAP_MODE","text":"<p>Indicates how the ends of lines should be drawn. The default is CP_LINE_CAP_BUTT.</p>"},{"location":"documentation/Types.html#valid-enums","title":"Valid Enums","text":"<ul> <li>CP_LINE_CAP_BUTT</li> <li>CP_LINE_CAP_ROUND</li> <li>CP_LINE_CAP_SQUARE</li> </ul>"},{"location":"documentation/Types.html#related_5","title":"Related","text":"<ul> <li>CP_Settings_LineCapMode</li> </ul>"},{"location":"documentation/Types.html#cp_line_joint_mode","title":"CP_LINE_JOINT_MODE","text":"<p>Controls how sharp corners are when drawing. Default is CP_LINE_JOINT_BEVEL.</p>"},{"location":"documentation/Types.html#valid-enums_1","title":"Valid Enums","text":"<ul> <li>CP_LINE_JOINT_ROUND</li> <li>CP_LINE_JOINT_BEVEL</li> <li>CP_LINE_JOINT_MITER</li> </ul>"},{"location":"documentation/Types.html#related_6","title":"Related","text":"<ul> <li>CP_Settings_LineJointMode</li> </ul>"},{"location":"documentation/Types.html#cp_position_mode","title":"CP_POSITION_MODE","text":"<p>Controls the local origin for drawing functions. Center will draw objects from the center, corner will draw from the top left corner.</p>"},{"location":"documentation/Types.html#valid-enums_2","title":"Valid Enums","text":"<ul> <li>CP_POSITION_CENTER</li> <li>CP_POSITION_CORNER</li> </ul>"},{"location":"documentation/Types.html#related_7","title":"Related","text":"<ul> <li>CP_Settings_RectMode</li> <li>CP_Settings_EllipseMode</li> <li>CP_Settings_ImageMode</li> </ul>"},{"location":"documentation/Types.html#cp_blend_mode","title":"CP_BLEND_MODE","text":"<p>Controls the math that is done when two colors are drawn on top of each other. CP_BLEND_ALPHA is the default.</p>"},{"location":"documentation/Types.html#valid-enums_3","title":"Valid Enums","text":"<ul> <li>CP_BLEND_ALPHA - Blends the two colors together naturally</li> <li>CP_BLEND_ADD - Adds the overlapping color values together</li> <li>CP_BLEND_SUBTRACT - Subtracts the first color from the second color</li> <li>CP_BLEND_MULTIPLY - Multiplies the color values together</li> <li>CP_BLEND_MIN - Takes the lower values in each color</li> <li>CP_BLEND_MAX - Takes the highest values in each color</li> </ul>"},{"location":"documentation/Types.html#related_8","title":"Related","text":"<ul> <li>CP_Settings_BlendMode</li> </ul>"},{"location":"documentation/Types.html#cp_image_filter_mode","title":"CP_IMAGE_FILTER_MODE","text":"<p>Chooses what math to use when anti-aliasing images.</p>"},{"location":"documentation/Types.html#valid-enums_4","title":"Valid Enums","text":"<ul> <li>CP_IMAGE_FILTER_NEAREST - Filters the nearest pixel of the image, good for pixel art, has sharp edges</li> <li>CP_IMAGE_FILTER_LINEAR - Attempts to blend all nearby pixels together to have smoother edges/lines</li> </ul>"},{"location":"documentation/Types.html#related_9","title":"Related","text":"<ul> <li>CP_Settings_ImageFilterMode</li> </ul>"},{"location":"documentation/Types.html#cp_image_wrap_mode","title":"CP_IMAGE_WRAP_MODE","text":"<p>Controls the math for what happens at the edge of textures.</p>"},{"location":"documentation/Types.html#valid-enums_5","title":"Valid Enums","text":"<ul> <li>CP_IMAGE_WRAP_CLAMP - Samples the edge of the border when drawing texels outside the image</li> <li>CP_IMAGE_WRAP_CLAMP_EDGE - Samples the pixel closest to the edge of the border when drawing texels outside the image</li> <li>CP_IMAGE_WRAP_REPEAT - Consistently repeats the image when drawing texels outside the image</li> <li>cp_IMAGE_WRAP_MIRROR - Consistently mirrors the image when drawing texels outside the image</li> </ul>"},{"location":"documentation/Types.html#related_10","title":"Related","text":"<ul> <li>CP_Settings_ImageWrapMode</li> </ul>"},{"location":"documentation/Types.html#cp_text_align_horizontal","title":"CP_TEXT_ALIGN_HORIZONTAL","text":"<p>Controls the horizontal alignment of text when drawing.</p>"},{"location":"documentation/Types.html#valid-enums_6","title":"Valid Enums","text":"<ul> <li>CP_TEXT_ALIGN_H_LEFT - Aligns it so the starting point is to the left of the text and grows towards the right.</li> <li>CP_TEXT_ALIGN_H_CENTER - Aligns it so the starting point is the center of the text and it grows outward.</li> <li>CP_TEXT_ALIGN_H_RIGHT - Aligns it so the starting point is to the right of the text and grows towards the left.</li> </ul>"},{"location":"documentation/Types.html#related_11","title":"Related","text":"<ul> <li>CP_Settings_TextAlignment</li> </ul>"},{"location":"documentation/Types.html#cp_text_align_vertical","title":"CP_TEXT_ALIGN_VERTICAL","text":"<p>Controls the vertical alignment of text when drawing.</p>"},{"location":"documentation/Types.html#valid-enums_7","title":"Valid Enums","text":"<ul> <li>CP_TEXT_ALIGN_V_TOP - Aligns it so that the starting point is above the tallest letter in the text.</li> <li>CP_TEXT_ALIGN_V_MIDDLE - Aligns it so the starting point is in the center (vertically) of the text.</li> <li>CP_TEXT_ALIGN_V_BOTTOM - Aligns it so that the starting point is below the lowest letter in the text, including tails (such as lower-case g).</li> <li>CP_TEXT_ALIGN_V_BASELINE - Aligns it so that the starting point is below the letters in the text, excluding tails.</li> </ul>"},{"location":"documentation/Types.html#related_12","title":"Related","text":"<ul> <li>CP_Settings_TextAlignment</li> </ul>"},{"location":"documentation/Types.html#cp_sound_group","title":"CP_SOUND_GROUP","text":"<p>Allows for the organization of sounds within different groups.</p>"},{"location":"documentation/Types.html#valid-enums_8","title":"Valid Enums","text":"<ul> <li>CP_SOUND_GROUP_0</li> <li>CP_SOUND_GROUP_1</li> <li>CP_SOUND_GROUP_2</li> <li>CP_SOUND_GROUP_3</li> <li>CP_SOUND_GROUP_4</li> <li>CP_SOUND_GROUP_5</li> <li>CP_SOUND_GROUP_6</li> <li>CP_SOUND_GROUP_7</li> <li>CP_SOUND_GROUP_8</li> <li>CP_SOUND_GROUP_9</li> <li>CP_SOUND_GROUP_MAX</li> <li>CP_SOUND_GROUP_SFX = CP_SOUND_GROUP_0</li> <li>CP_SOUND_GROUP_MUSIC = CP_SOUND_GROUP_1</li> </ul>"},{"location":"documentation/Types.html#related_13","title":"Related","text":"<ul> <li>All Sound Functions</li> <li>CP_Sound_ResumeGroup</li> <li>CP_Sound_PauseGroup</li> </ul>"},{"location":"documentation/Types.html#cp_vector","title":"CP_Vector","text":"<p>A structure that holds two float values. Used for linear algebra, position values, or any purpose requiring two floats.</p>"},{"location":"documentation/Types.html#example","title":"Example","text":"<pre><code>void update()\n{\n    // create a position vec2\n    CP_Vector position;\n\n    // set the position\n    position.x = 100;\n    position.y = 200;\n\n    // \"move\" the position by 100 in the x-axis and y-axis \n    // by adding 100 to each component of the vector.\n    position = CP_Vector_Add(position, 100, 100);\n\n    // draw a rectangle at the position\n    CP_Graphics_DrawRect(position.x, position.y, 50, 50);\n}\n</code></pre>"},{"location":"documentation/Types.html#related_14","title":"Related","text":"<ul> <li>All Vector Functions</li> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Types.html#cp_matrix","title":"CP_Matrix","text":"<p>A structure that holds 9 floats, used for linear algebra, transformations, or any other purpose requiring 9 floats.</p>"},{"location":"documentation/Types.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n    // create a transform and set it to initialized values\n    CP_Matrix transform = CP_Matrix_Identity();\n\n    // make the matrix a translation transform by (100, 100)\n    transform = CP_Matrix_Translate((CP_Vector) { 100, 100 });\n\n    // create a vec2 position\n    CP_Vector position;\n    position.x = 100;\n    position.y = 100;\n\n    // apply that matrix to the point and store it in the position\n    position = CP_Matrix_MultiplyVector(transform, position);\n}\n</code></pre>"},{"location":"documentation/Types.html#related_15","title":"Related","text":"<ul> <li>All Matrix Functions</li> <li>CP_Graphics_DrawRect</li> </ul>"},{"location":"documentation/Types.html#cp_key","title":"CP_KEY","text":"<p>An Enum used to check keyboard operations.</p>"},{"location":"documentation/Types.html#valid-enums_9","title":"Valid Enums","text":"<ul> <li>KEY_SPACE</li> <li>KEY_APOSTROPHE</li> <li>KEY_COMMA</li> <li>KEY_MINUS</li> <li>KEY_PERIOD</li> <li>KEY_SLASH</li> <li>KEY_0</li> <li>KEY_1</li> <li>KEY_2</li> <li>KEY_3</li> <li>KEY_4</li> <li>KEY_5</li> <li>KEY_6</li> <li>KEY_7</li> <li>KEY_8</li> <li>KEY_9</li> <li>KEY_SEMICOLON</li> <li>KEY_EQUAL</li> <li>KEY_A</li> <li>KEY_B</li> <li>KEY_C</li> <li>KEY_D</li> <li>KEY_E</li> <li>KEY_F</li> <li>KEY_G</li> <li>KEY_H</li> <li>KEY_I</li> <li>KEY_J</li> <li>KEY_K</li> <li>KEY_L</li> <li>KEY_M</li> <li>KEY_N</li> <li>KEY_O</li> <li>KEY_P</li> <li>KEY_Q</li> <li>KEY_R</li> <li>KEY_S</li> <li>KEY_T</li> <li>KEY_U</li> <li>KEY_V</li> <li>KEY_W</li> <li>KEY_X</li> <li>KEY_Y</li> <li>KEY_Z</li> <li>KEY_LEFT_BRACKET</li> <li>KEY_BACKSLASH</li> <li>KEY_RIGHT_BRACKET</li> <li>KEY_GRAVE_ACCENT</li> <li>KEY_WORLD_1</li> <li>KEY_WORLD_2</li> <li>KEY_ESCAPE</li> <li>KEY_ENTER</li> <li>KEY_TAB</li> <li>KEY_BACKSPACE</li> <li>KEY_INSERT</li> <li>KEY_DELETE</li> <li>KEY_RIGHT</li> <li>KEY_LEFT</li> <li>KEY_DOWN</li> <li>KEY_UP</li> <li>KEY_PAGE_UP</li> <li>KEY_PAGE_DOWN</li> <li>KEY_HOME</li> <li>KEY_END</li> <li>KEY_CAPS_LOCK</li> <li>KEY_SCROLL_LOCK</li> <li>KEY_NUM_LOCK</li> <li>KEY_PRINT_SCREEN</li> <li>KEY_PAUSE</li> <li>KEY_F1</li> <li>KEY_F2</li> <li>KEY_F3</li> <li>KEY_F4</li> <li>KEY_F5</li> <li>KEY_F6</li> <li>KEY_F7</li> <li>KEY_F8</li> <li>KEY_F9</li> <li>KEY_F10</li> <li>KEY_F11</li> <li>KEY_F12</li> <li>KEY_F13</li> <li>KEY_F14</li> <li>KEY_F15</li> <li>KEY_F16</li> <li>KEY_F17</li> <li>KEY_F18</li> <li>KEY_F19</li> <li>KEY_F20</li> <li>KEY_F21</li> <li>KEY_F22</li> <li>KEY_F23</li> <li>KEY_F24</li> <li>KEY_F25</li> <li>KEY_KP_0</li> <li>KEY_KP_1</li> <li>KEY_KP_2</li> <li>KEY_KP_3</li> <li>KEY_KP_4</li> <li>KEY_KP_5</li> <li>KEY_KP_6</li> <li>KEY_KP_7</li> <li>KEY_KP_8</li> <li>KEY_KP_9</li> <li>KEY_KP_DECIMAL</li> <li>KEY_KP_DIVIDE</li> <li>KEY_KP_MULTIPLY</li> <li>KEY_KP_SUBTRACT</li> <li>KEY_KP_ADD</li> <li>KEY_KP_ENTER</li> <li>KEY_KP_EQUAL</li> <li>KEY_LEFT_SHIFT</li> <li>KEY_LEFT_CONTROL</li> <li>KEY_LEFT_ALT</li> <li>KEY_LEFT_SUPER</li> <li>KEY_RIGHT_SHIFT</li> <li>KEY_RIGHT_CONTROL</li> <li>KEY_RIGHT_ALT</li> <li>KEY_RIGHT_SUPER</li> <li>KEY_MENU</li> </ul>"},{"location":"documentation/Types.html#related_16","title":"Related","text":"<ul> <li>All Input Functions</li> <li>CP_Input_KeyTriggered</li> <li>CP_Input_KeyReleased</li> </ul>"},{"location":"documentation/Types.html#cp_mouse","title":"CP_MOUSE","text":"<p>An Enum to check Mouse operations.</p>"},{"location":"documentation/Types.html#valid-enums_10","title":"Valid Enums","text":"<ul> <li>MOUSE_BUTTON_1</li> <li>MOUSE_BUTTON_2</li> <li>MOUSE_BUTTON_3</li> <li>MOUSE_BUTTON_4</li> <li>MOUSE_BUTTON_5</li> <li>MOUSE_BUTTON_6</li> <li>MOUSE_BUTTON_7</li> <li>MOUSE_BUTTON_8</li> <li>MOUSE_BUTTON_LAST = MOUSE_BUTTON_8</li> <li>MOUSE_BUTTON_LEFT = MOUSE_BUTTON_1</li> <li>MOUSE_BUTTON_MIDDLE = MOUSE_BUTTON_3</li> <li>MOUSE_BUTTON_RIGHT = MOUSE_BUTTON_2</li> </ul>"},{"location":"documentation/Types.html#related_17","title":"Related","text":"<ul> <li>All Input Functions</li> <li>CP_Input_MouseClicked</li> <li>CP_Input_MouseDown</li> </ul>"},{"location":"documentation/Types.html#cp_gamepad","title":"CP_GAMEPAD","text":"<p>An Enum to check gamepad operations.</p>"},{"location":"documentation/Types.html#valid-enums_11","title":"Valid Enums","text":"<ul> <li>GAMEPAD_DPAD_UP</li> <li>GAMEPAD_DPAD_DOWN</li> <li>GAMEPAD_DPAD_LEFT</li> <li>GAMEPAD_DPAD_RIGHT</li> <li>GAMEPAD_START</li> <li>GAMEPAD_BACK</li> <li>GAMEPAD_LEFT_THUMB</li> <li>GAMEPAD_RIGHT_THUMB</li> <li>GAMEPAD_LEFT_SHOULDER</li> <li>GAMEPAD_RIGHT_SHOULDER</li> <li>GAMEPAD_A</li> <li>GAMEPAD_B</li> <li>GAMEPAD_X</li> <li>GAMEPAD_Y</li> </ul>"},{"location":"documentation/Types.html#related_18","title":"Related","text":"<ul> <li>All Input Functions</li> <li>CP_Input_GamepadDown</li> <li>CP_Input_GamepadReleased</li> </ul>"},{"location":"documentation/Types.html#cp_max_gamepads","title":"CP_MAX_GAMEPADS","text":"<p>An int indicating the max number of gamepads, the current max is 4.</p>"},{"location":"documentation/Vector.html","title":"Vector","text":"<p>This section contains all functions relating to CP_Vector.</p>"},{"location":"documentation/Vector.html#cp_vector_set","title":"CP_Vector_Set","text":"<p>Manually create a CP_Vector by inputting its two values.</p>"},{"location":"documentation/Vector.html#function","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Set(float x, float y);\n</code></pre>"},{"location":"documentation/Vector.html#parameters","title":"Parameters","text":"<ul> <li>x (float) - The x value you want in the vector.</li> <li>y (float) - The y value you want in the vector.</li> </ul>"},{"location":"documentation/Vector.html#return","title":"Return","text":"<ul> <li>CP_Vector - A vector with the given values.</li> </ul>"},{"location":"documentation/Vector.html#example","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector random_v = CP_Vector_Set(CP_Random_RangeFloat(0, 50), CP_Random_RangeFloat(0, 50));\n}\n</code></pre>"},{"location":"documentation/Vector.html#related","title":"Related","text":"<ul> <li>CP_Vector</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_zero","title":"CP_Vector_Zero","text":"<p>Creates a CP_Vector with both values being 0.</p>"},{"location":"documentation/Vector.html#function_1","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Zero();\n</code></pre>"},{"location":"documentation/Vector.html#parameters_1","title":"Parameters","text":"<p>This function has no parameters.</p>"},{"location":"documentation/Vector.html#return_1","title":"Return","text":"<ul> <li>CP_Vector - A vector with the given values.</li> </ul>"},{"location":"documentation/Vector.html#example_1","title":"Example","text":"<pre><code>void update()\n{\n  CP_Vector zero_v = CP_Vector_Zero();\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_1","title":"Related","text":"<ul> <li>CP_Vector</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_negate","title":"CP_Vector_Negate","text":"<p>Returns a vector with the negated values of a given CP_Vector</p>"},{"location":"documentation/Vector.html#function_2","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Negate(CP_Vector v);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_2","title":"Parameters","text":"<ul> <li>v (CP_Vector) - The vector to negate the value in.</li> </ul>"},{"location":"documentation/Vector.html#return_2","title":"Return","text":"<ul> <li>CP_Vector - A vector with the negated values.</li> </ul>"},{"location":"documentation/Vector.html#example_2","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector random_v = CP_Vector_Set(CP_Random_RangeFloat(0, 50), CP_Random_RangeFloat(0, 50));\n    CP_Vector negated_v = CP_Vector_Negate(random_v);\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_2","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_add","title":"CP_Vector_Add","text":"<p>Adds together the values within two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_3","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Add(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_3","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The first vector to add.</li> <li>b (CP_Vector) - The second vector to add.</li> </ul>"},{"location":"documentation/Vector.html#return_3","title":"Return","text":"<ul> <li>CP_Vector - The sum of the two vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_3","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 1);\n    CP_Vector vec_b = CP_Vector_Set(-1, 6);\n    CP_Vector sum_v = CP_Vector_Add(vec_a, vec_b);  // Returns a vector with values (0, 7)\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_3","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_subtract","title":"CP_Vector_Subtract","text":"<p>Subtracts the values within two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_4","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Subtract(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_4","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The vector that will subtract b.</li> <li>b (CP_Vector) - The vector that will be subtracted from a.</li> </ul>"},{"location":"documentation/Vector.html#return_4","title":"Return","text":"<ul> <li>CP_Vector - The difference of the two vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_4","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 1);\n    CP_Vector vec_b = CP_Vector_Set(-1, 6);\n    CP_Vector sum_v = CP_Vector_Subtract(vec_a, vec_b);  // Returns a vector with values (2, -5)\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_4","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_scale","title":"CP_Vector_Scale","text":"<p>Returns a new CP_Vector that has the values of the given CP_Vector scaled by the given scalar.</p>"},{"location":"documentation/Vector.html#function_5","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Scale(CP_Vector a, float scale);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_5","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The vector to scale.</li> <li>scale (float) - The value to scale the vector by.</li> </ul>"},{"location":"documentation/Vector.html#return_5","title":"Return","text":"<ul> <li>CP_Vector - The scaled vector.</li> </ul>"},{"location":"documentation/Vector.html#example_5","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 1);\n    CP_Vector sum_v = CP_Vector_Scale(vec_a, 4);  // Returns a vector with values (4, 4)\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_5","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_normalize","title":"CP_Vector_Normalize","text":"<p>Returns a new CP_Vector that is the normalized version of the given CP_Vector.</p>"},{"location":"documentation/Vector.html#function_6","title":"Function","text":"<pre><code>CP_Vector CP_Vector_Normalize(CP_Vector vec);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_6","title":"Parameters","text":"<ul> <li>vec (CP_Vector) - The vector to normalize.</li> </ul>"},{"location":"documentation/Vector.html#return_6","title":"Return","text":"<ul> <li>CP_Vector - The normalized vector.</li> </ul>"},{"location":"documentation/Vector.html#example_6","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(3, 4);\n    CP_Vector norm_v = CP_Vector_Normalize(vec_a);  // Returns a vector with values (.6, .8)\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_6","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_matrixmultiply","title":"CP_Vector_MatrixMultiply","text":"<p>Creates a CP_Vector by multiplying the given CP_Vector by the given CP_Matrix.</p>"},{"location":"documentation/Vector.html#function_7","title":"Function","text":"<pre><code>CP_Vector CP_Vector_MatrixMultiply(CP_Matrix matrix, CP_Vector vec);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_7","title":"Parameters","text":"<ul> <li>matrix (CP_Matrix) - The matrix to use in the multiplication.</li> <li>vec (CP_Vector) - The vector to use in the multiplication.</li> </ul>"},{"location":"documentation/Vector.html#return_7","title":"Return","text":"<ul> <li>CP_Vector - The vector created by matrix * vec.</li> </ul>"},{"location":"documentation/Vector.html#example_7","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(3, 4);\n    CP_Matrix matrix_a = CP_Matrix_Translate(CP_Vector_Set(10, 6));\n    CP_Vector norm_v = CP_Vector_MatrixMultiply(matrix_a, vec_a);\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_7","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> <li>CP_Matrix_Translate</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_length","title":"CP_Vector_Length","text":"<p>Calculates the length of a given CP_Vector.</p>"},{"location":"documentation/Vector.html#function_8","title":"Function","text":"<pre><code>float CP_Vector_Length(CP_Vector vec);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_8","title":"Parameters","text":"<ul> <li>vec (CP_Vector) - The vector to find the length of.</li> </ul>"},{"location":"documentation/Vector.html#return_8","title":"Return","text":"<ul> <li>float - the length of the given vector.</li> </ul>"},{"location":"documentation/Vector.html#example_8","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(3, 4);\n    float vec_length = CP_Vector_Length(vec_a); // returns 5\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_8","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_distance","title":"CP_Vector_Distance","text":"<p>Calculates the distance between two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_9","title":"Function","text":"<pre><code>float CP_Vector_Distance(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_9","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The first point in the calculation.</li> <li>b (CP_Vector) - The second point in the calculation.</li> </ul>"},{"location":"documentation/Vector.html#return_9","title":"Return","text":"<ul> <li>float - The distance between the two given points.</li> </ul>"},{"location":"documentation/Vector.html#example_9","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(3, 4);\n    CP_Vector vec_b = CP_Vector_Set(0, 0);\n    float dist = CP_Vector_Distance(vec_a, vec_b); // returns 5\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_9","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_dotproduct","title":"CP_Vector_DotProduct","text":"<p>Calculates the dot product of two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_10","title":"Function","text":"<pre><code>float CP_Vector_DotProduct(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_10","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The first vector in the calculation.</li> <li>b (CP_Vector) - The second vector in the calculation.</li> </ul>"},{"location":"documentation/Vector.html#return_10","title":"Return","text":"<ul> <li>float - The dot product of the two given CP_Vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_10","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 0);\n    CP_Vector vec_b = CP_Vector_Set(0, 1);\n    float dist = CP_Vector_DotProduct(vec_a, vec_b); // returns 0 since a and b are perpendicular\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_10","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_crossproduct","title":"CP_Vector_CrossProduct","text":"<p>Calculates the magnitude of the cross product of two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_11","title":"Function","text":"<pre><code>float CP_Vector_CrossProduct(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_11","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The first vector in the calculation.</li> <li>b (CP_Vector) - The second vector in the calculation.</li> </ul>"},{"location":"documentation/Vector.html#return_11","title":"Return","text":"<ul> <li>float - The length of the cross product of the two given CP_Vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_11","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 0);\n    CP_Vector vec_b = CP_Vector_Set(0, 1);\n    float crossPLength = CP_Vector_CrossProduct(vec_a, vec_b); // returns 1 since a x b = (0, 0, 1)\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_11","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_angle","title":"CP_Vector_Angle","text":"<p>Calculates the angle between two given CP_Vectors.</p>"},{"location":"documentation/Vector.html#function_12","title":"Function","text":"<pre><code>float CP_Vector_Angle(CP_Vector a, CP_Vector b);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_12","title":"Parameters","text":"<ul> <li>a (CP_Vector) - The first vector in the calculation.</li> <li>b (CP_Vector) - The second vector in the calculation.</li> </ul>"},{"location":"documentation/Vector.html#return_12","title":"Return","text":"<ul> <li>float - The smaller angle between the given CP_Vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_12","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 0);\n    CP_Vector vec_b = CP_Vector_Set(0, 1);\n    float angleBetween = CP_Vector_Angle(vec_a, vec_b); // returns 90\n    float biggerAngleBetween = 360.f - angleBeetwen ; // results in 270, which is the bigger angle between\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_12","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_anglecw","title":"CP_Vector_AngleCW","text":"<p>Calculates the clockwise angle between two given CP_Vectors. Note that this takes into the account that in CProcessing, the x-axis points to the right and the y-axis points downwards.</p>"},{"location":"documentation/Vector.html#function_13","title":"Function","text":"<pre><code>float CP_Vector_AngleCW(CP_Vector from, CP_Vector to);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_13","title":"Parameters","text":"<ul> <li>from (CP_Vector) - The vector to calculate from.</li> <li>to (CP_Vector) - The vector to calculate towards.</li> </ul>"},{"location":"documentation/Vector.html#return_13","title":"Return","text":"<ul> <li>float - The clockwise angle between the given CP_Vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_13","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 0);\n    CP_Vector vec_b = CP_Vector_Set(0, 1);\n    float angleBetweenAB = CP_Vector_AngleCW(vec_a, vec_b); // returns 90\n    float angleBetweenBA = CP_Vector_AngleCW(vec_b, vec_a); // returns 270\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_13","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"documentation/Vector.html#cp_vector_angleccw","title":"CP_Vector_AngleCCW","text":"<p>Calculates the counter-clockwise angle between two given CP_Vectors. Note that this takes into the account that in CProcessing, the x-axis points to the right and the y-axis points downwards.</p>"},{"location":"documentation/Vector.html#function_14","title":"Function","text":"<pre><code>float CP_Vector_AngleCCW(CP_Vector from, CP_Vector to);\n</code></pre>"},{"location":"documentation/Vector.html#parameters_14","title":"Parameters","text":"<ul> <li>from (CP_Vector) - The vector to calculate from.</li> <li>to (CP_Vector) - The vector to calculate towards.</li> </ul>"},{"location":"documentation/Vector.html#return_14","title":"Return","text":"<ul> <li>float - The counter-clockwise angle between the given CP_Vectors.</li> </ul>"},{"location":"documentation/Vector.html#example_14","title":"Example","text":"<pre><code>void update()\n{\n    CP_Vector vec_a = CP_Vector_Set(1, 0);\n    CP_Vector vec_b = CP_Vector_Set(0, 1);\n    float angleBetweenAB = CP_Vector_AngleCCW(vec_a, vec_b); // returns 270\n    float angleBetweenBA = CP_Vector_AngleCCW(vec_b, vec_a); // returns 90\n}\n</code></pre>"},{"location":"documentation/Vector.html#related_14","title":"Related","text":"<ul> <li>CP_Vector</li> <li>CP_Vector_Set</li> </ul>"},{"location":"guides/vs2022_setup.html","title":"Visual Studio 2022 Setup","text":""},{"location":"guides/vs2022_setup.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Installed Visual Studios 2022 Community Edition. If you haven't, here are the steps to set it up:</p> <ul> <li>Click here to download the Visual Studios 2022 installer.</li> <li>Double-click on the installer that you downloaded.</li> <li>Under the [Desktop and Mobile] section, check the box for [Desktop development with C++].</li> <li>Click the on [Install/Modify] button.</li> </ul> </li> <li> <p>Downloaded the <code>CProcessing.zip</code> zip file from the Moodle link <code>CProcessing Library</code>.</p> </li> <li>Downloaded the following files used to run the initial code<ul> <li>DigiPen Singapore Logo</li> <li>main.c</li> </ul> </li> </ul>"},{"location":"guides/vs2022_setup.html#project-creation","title":"Project Creation","text":"<p>First, we will create the Visual Studios Solution and Project files that will be used to run our first application.</p> <ul> <li>Open Visual Studios. You should see a window that looks like this:</li> </ul> <p></p> <ul> <li>Under the [Visual Studio 2022] window:<ul> <li>Click on [Create a new project]</li> </ul> </li> <li>Under the [Create a new project] window:<ul> <li>Click on [Empty Project]. Make sure that it's the C++ version. </li> <li>Click on [Next].</li> </ul> </li> <li>Under the [Configure your new project] page:<ul> <li>(Optional) Change the [Project Name] to one of your liking.</li> <li>(Optional) Change the [Location].</li> <li>Note the [Location] as we need to navigate to it later.</li> <li>Click on [Create].</li> </ul> </li> </ul> <p>You should see Visual Studios appear on your screen, like so:</p> <p></p> <p>This means that it has successfully created and opened.</p> <p>In this project, we will not be building for 32-bit systems, so to avoid confusion, we need to remove 32-bit system-related configurations from the project.</p> <ul> <li>Under [Build] &gt; [Configuration Manager] <ul> <li>Click on [Active Solution Platform] &gt; [Edit\u2026] &gt; Click on [x86] &gt; [Remove]</li> <li>Click on [Platform] &gt; [Edit\u2026] &gt; Click on [Win32] &gt; [Remove]</li> </ul> </li> </ul>"},{"location":"guides/vs2022_setup.html#adding-a-folder-for-cprocessing-and-assets","title":"Adding a folder for CProcessing and assets","text":"<p>Next, we will add the CProcessing library to a location within the project folder.  This is so that our project can easily locate CProcessing's header and library files, and subsequently use its code.</p> <ul> <li>Go to the project's Solution File (.sln) using Windows Explorer. It should be at the [Location] that you set earlier.</li> <li>Create a folder named \"Extern\" at that location. Extern is short for \"External\" which means that this folder will contain code that is provided by someone else.<ul> <li>Copy the CProcessing folder from the given <code>CProcessing.zip</code> file into the \"Extern\" folder.</li> </ul> </li> <li>Create a folder named \"Assets\" at that location.<ul> <li>Copy the given <code>DigiPen_Singapore_WEB_RED.png</code> file into the \"Assets\" folder you just created</li> </ul> </li> </ul>"},{"location":"guides/vs2022_setup.html#project-configuration","title":"Project Configuration","text":"<p>Next, we configure the project properties.  Right-click on the project in the Solution Explorer:</p> <p></p> <p>Then click on [Properties].  It should open a window that looks something like this:</p> <p></p> <p>This window contains all configurations of the project.</p> <p>IMPORTANT: From here on, unless stated otherwise, all the settings we will make will affect both Debug and Release configurations, so make sure to set [Configurations] to All Configurations.</p> <p>Add the additional directories the compiler needs to look for when compiling and linking:</p> <ul> <li>Under [Configuration Properties] &gt; [VC++ Directories]<ul> <li>Add <code>$(SolutionDir)Extern\\CProcessing\\inc</code> to [General] &gt; [Include Directories]</li> <li>Add <code>$(SolutionDir)Extern\\CProcessing\\lib\\x64</code> to [General] &gt; [Library Directories]</li> </ul> </li> </ul> <p>WARNING: When you add an entry into a section, you have to seperate each entry with ';'.  For example, if the entry for [Include Directories] is: <code>$(VC_IncludePath);$(WindowsSDK_IncludePath)</code>, to add <code>$(SolutionDir)Extern\\CProcessing\\inc</code>, you will have to do: <code>$(VC_IncludePath);$(WindowsSDK_IncludePath);$(SolutionDir)Extern\\CProcessing\\inc</code></p> <p>Configure the linker to link to the appropriate CProcessing library files depending on whether we are on Debug or Release configurations:</p> <ul> <li>Under [Configuration Properties] &gt; [Linker] &gt; [Input] &gt; [Additional Dependencies]<ul> <li>With [Configuration] set to Debug, add <code>CProcessingd.lib</code></li> <li>With [Configuration] set to Release, add <code>CProcessing.lib</code></li> </ul> </li> </ul> <p>Configure the character set the project is using:</p> <ul> <li>Under [Configuration Properties] &gt; [Advanced] &gt; [Character Set]<ul> <li>Set to Use Multibyte Set</li> </ul> </li> </ul> <p>Configure the subsystem the project is using:</p> <ul> <li>Under [Configuration Properties] &gt; [Linker] &gt; [System] &gt; [Subsystem]<ul> <li>Set to Windows (/SUBSYSTEM:WINDOWS)</li> </ul> </li> </ul> <p>Set the output directory of the compiler where the executable will be created.  We will set this to a folder named bin at the directory the Solution file is in:</p> <ul> <li>Under [Configuration Properties] &gt; [General] &gt; [Output Directory]<ul> <li>Set to <code>$(SolutionDir)bin\\$(Configuration)-$(Platform)\\</code></li> </ul> </li> </ul> <p>Set the intermediate directory of the compiler.  This is where all the 'rubbish' files that the compiler generates will go to. We will set this to a folder named \".tmp\" at the directory the Solution file is in:</p> <ul> <li>Under [Configuration Properties] &gt; [General] &gt; [Intermediate Directory]<ul> <li>Set to <code>$(SolutionDir).tmp\\$(Configuration)-$(Platform)\\</code></li> </ul> </li> </ul> <p>Set the working directory of the debugger to be in the same directory as the executables output by the compiler:</p> <ul> <li>Under [Configuration Properties] &gt; [Debugging] &gt; [Working Directory]<ul> <li>Set to <code>$(SolutionDir)bin\\$(Configuration)-$(Platform)\\</code></li> </ul> </li> </ul> <p>Configure the entry point to comply with CProcessing's entry point:</p> <ul> <li>Under [Configuration Properties] &gt; [Linker] &gt; [Advanced] &gt; [Entry Point]<ul> <li>Set to <code>mainCRTStartup</code></li> </ul> </li> </ul> <p>Tell Visual Studios to copy the appropriate .dll and assets to where the executable is after it's done building:</p> <ul> <li>With [Configuration] set to Debug:<ul> <li>Go to [Configuration Properties] -&gt; [Build Events] &gt; [Post-Build Event] &gt; [Command Line] &gt; Click on the [v] icon at the end of the [Command Line] entry area &gt; [Edit...] and add the following lines in the popup window:<ul> <li><code>xcopy \"$(SolutionDir)Assets\\*\" \"$(OutDir)Assets\\\" /s /r /y /q</code></li> <li><code>xcopy \"$(SolutionDir)Extern\\CProcessing\\lib\\x64\\CProcessingd.dll\" \"$(OutDir)\" /s /r /y /q</code></li> <li><code>xcopy \"$(SolutionDir)Extern\\CProcessing\\lib\\x64\\fmodL.dll\" \"$(OutDir)\" /s /r /y /q</code></li> </ul> </li> </ul> </li> <li>With [Configuration] set to Release, add the following lines:<ul> <li>Go to [Configuration Properties] -&gt; [Build Events] &gt; [Post-Build Event] &gt; [Command Line] &gt; Click on the [v] icon at the end of the [Command Line] entry area &gt; [Edit...] and add the following lines in the popup window:<ul> <li><code>xcopy \"$(SolutionDir)Assets\\*\" \"$(OutDir)Assets\\\" /s /r /y /q</code></li> <li><code>xcopy \"$(SolutionDir)Extern\\CProcessing\\lib\\x64\\CProcessing.dll\" \"$(OutDir)\" /s /r /y /q</code></li> <li><code>xcopy \"$(SolutionDir)Extern\\CProcessing\\lib\\x64\\fmod.dll\" \"$(OutDir)\" /s /r /y /q</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"guides/vs2022_setup.html#running-our-first-application","title":"Running our first application","text":"<p>Create a fresh CPP file with the entry point function and name it \"main.c\"</p> <ul> <li>[Project] &gt; [Add New Item..] &gt; [C++ File]</li> <li>Copy the code from the given \"main.c\" into the \"main.c\" file that you just created.</li> <li>Build and run the project</li> <li>You should see a window pop up with the singapore DigiPen logo.</li> </ul> <p>If you got here, congratulations! You have set up CProcessing!</p>"}]}